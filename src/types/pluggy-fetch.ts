/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create API Key
         * @description Validate clientId and clientSecret and return an API Key
         */
        post: operations['auth-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/connect_token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Connect Token
         * @description Creates a connect token
         */
        post: operations['connect-token-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/connectors': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description This endpoint retrieves all available connectors.
         */
        get: operations['connectors-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/connectors/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description This endpoint retrieves a specific connector.
         */
        get: operations['connector-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/connectors/{id}/validate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate
         * @description Validates a connector parameters usign the connector validation
         */
        post: operations['connectors-validate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/items': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Creates a item and syncs all the products with the financial institution, using as credentials the sent parameters.
         */
        post: operations['items-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/items/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the item resource by its id
         */
        get: operations['items-retrieve'];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Delete the item by its primary identifier
         */
        delete: operations['items-delete'];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Triggers new syncronization for the Item, optionally updating the stored credentials.
         */
        patch: operations['items-update'];
        trace?: never;
    };
    '/items/{id}/mfa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send MFA
         * @description When item is Waiting User Input, this method allows to submit multi-factor authentication value
         */
        post: operations['items-send-mfa'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/items/{id}/disable-auto-sync': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Disable item auto sync
         * @description When client disables auto sync, the item will not be updated automatically anymore, until the client force an item update.
         */
        patch: operations['items-disable-autosync'];
        trace?: never;
    };
    '/consents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all consents given to the item provided
         */
        get: operations['consents-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/consents/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the consent resource by it's id
         */
        get: operations['consent-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all accounts collected for the item provided
         */
        get: operations['accounts-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the account resource by its id
         */
        get: operations['accounts-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/accounts/{id}/statements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account statements
         * @description Recovers all statements collected for the account provided
         */
        get: operations['account-statements-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all transactions collected for the acount provided
         */
        get: operations['transactions-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/transactions/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the transaction resource by it's id
         */
        get: operations['transactions-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update
         * @description Update the transaction's category by it's id
         */
        patch: operations['transactions-Update'];
        trace?: never;
    };
    '/investments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all investments collected for the item provided
         */
        get: operations['investments-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/investments/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the investment resource by its id
         */
        get: operations['investments-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/investments/{id}/transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List investment transactions
         * @description Recovers all investment transactions for the investment provided
         */
        get: operations['investment-transactions-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/identity': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by item
         * @description Recovers identity of an item if available
         */
        get: operations['identity-find-by-item'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/identity/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the identity resource by its id
         */
        get: operations['identity-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/webhooks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Retrieves all Webhooks associated with your application
         */
        get: operations['webhooks-list'];
        put?: never;
        /**
         * Create
         * @description Creates a webhook attached to the specific event and provides the notification url
         */
        post: operations['webhooks-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/webhooks/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Retrieves a specific webhook
         */
        get: operations['webhooks-retrieve'];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Deletes a webhook listener by its id
         */
        delete: operations['webhooks-delete'];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Updates a webhook event and/or url listener. Once updated all events that are triggered will replicate the updated logic
         */
        patch: operations['webhooks-update'];
        trace?: never;
    };
    '/categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all categories active from the data categorization.
         *     Can be filtered by the parentId of the category.
         */
        get: operations['categories-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/categories/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the category resource by its id
         */
        get: operations['categories-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/categories/rules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Category Rules
         * @description Recovers category rules
         */
        get: operations['client-category-rules-list'];
        put?: never;
        /**
         * Create Category Rule
         * @description Create a single category rule
         */
        post: operations['client-category-rules-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/loans': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all loans collected for the item provided
         */
        get: operations['loans-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/loans/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the loan resource by its id
         */
        get: operations['loans-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bills': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all credit card bills collected for the account provided
         */
        get: operations['bills-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bills/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the bill resource by its id
         */
        get: operations['bills-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/customers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all created payment customers
         */
        get: operations['payment-customers-list'];
        put?: never;
        /** Create */
        post: operations['payment-customer-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/customers/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the payment customer resource by its id
         */
        get: operations['payment-customer-retrieve'];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Deletes the payment customer resource by its id
         */
        delete: operations['payment-customer-delete'];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Updates the payment customer resource
         */
        patch: operations['payment-customer-update'];
        trace?: never;
    };
    '/payments/recipients': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all created payment recipients
         */
        get: operations['payment-recipients-list'];
        put?: never;
        /**
         * Create
         * @description Creates the payment recipient resource
         */
        post: operations['payment-recipient-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/recipients/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the payment recipient resource by its id
         */
        get: operations['payment-recipient-retrieve'];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Deletes the payment recipient resource by its id
         */
        delete: operations['payment-recipient-delete'];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Updates the payment recipient resource
         */
        patch: operations['payment-recipient-update'];
        trace?: never;
    };
    '/payments/recipients/institutions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Institutions
         * @description Recovers all created payment institutions
         */
        get: operations['payment-recipients-institution-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/recipients/institutions/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Institution
         * @description Recovers the payment institution resource by its id
         */
        get: operations['payment-recipient-institutions-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all created payment requests
         */
        get: operations['payment-requests-list'];
        put?: never;
        /**
         * Create
         * @description Creates the payment request resource
         */
        post: operations['payment-request-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/automatic-pix': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Automatic PIX payment request
         * @description Creates a payment request where the payment is made using automatic PIX. Once consent is granted by the user, payments can be scheduled according to the rules defined in the request.
         */
        post: operations['payment-request-create-automatic-pix'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/automatic-pix/schedule': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Schedule Automatic PIX payment
         * @description Schedules an Automatic PIX payment
         */
        post: operations['payment-request-create-automatic-pix-schedule'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/automatic-pix/schedules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Automatic PIX scheduled payments
         * @description Lists all Automatic PIX payments from a payment request
         */
        get: operations['payment-request-get-automatic-pix-schedules'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{requestId}/automatic-pix/schedules/{paymentId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an automatic PIX scheduled payment
         * @description Recovers an automatic PIX scheduled payment by id
         */
        get: operations['payment-request-get-automatic-pix-schedule'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/automatic-pix/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an automatic PIX consent
         * @description Cancels an automatic PIX consent
         */
        post: operations['payment-request-cancel-automatic-pix-consent'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/automatic-pix/schedules/{scheduleId}/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an Automatic PIX schedule
         * @description Cancels an Automatic PIX schedule.
         */
        post: operations['cancel-automatic-pix-schedule'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/automatic-pix/schedules/{scheduleId}/retry': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retry an Automatic PIX schedule
         * @description Retries an Automatic PIX schedule, only if the authorization accepts retries. The system allows up to 3 retry attempts. Requests must be submitted by 10pm on the day before the scheduled payment date.
         */
        post: operations['retry-automatic-pix-schedule'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/pix-qr': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create PIX QR payment request
         * @description Creates the PIX QR payment request resource
         */
        post: operations['payment-request-create-pix-qr'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the payment request resource by its id
         */
        get: operations['payment-request-retrieve'];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Deletes the payment request resource by its id
         */
        delete: operations['payment-request-delete'];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Updates the payment request resource
         */
        patch: operations['payment-request-update'];
        trace?: never;
    };
    '/payments/requests/{id}/schedules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Schedules
         * @description Recovers all scheduled payments from a payment request
         */
        get: operations['payment-schedules-list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/schedules/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Payment Schedule Authorization */
        post: operations['payment-schedules-cancel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/requests/{id}/schedules/{scheduleId}/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Payment Schedule */
        post: operations['payment-schedules-cancel-specific'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/intents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description Recovers all created payment intents for the payment request provided
         */
        get: operations['payment-intents-list'];
        put?: never;
        /**
         * Create
         * @description Creates the payment intent resource
         */
        post: operations['payment-intent-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/payments/intents/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve
         * @description Recovers the payment intent resource by its id
         */
        get: operations['payment-intent-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/smart-transfers/preauthorizations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List preauthorizations
         * @description Recovers all created preauthorizations
         */
        get: operations['smart-tranfers-preauthorizations-list'];
        put?: never;
        /**
         * Create preauthorization
         * @description Creates the smart transfer preauthorization resource
         */
        post: operations['smart-transfer-preauthorization-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/smart-transfers/preauthorizations/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve preauthorization
         * @description Recovers the smart transfer preauthorization resource by its id
         */
        get: operations['smart-transfer-preauthorization-retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/smart-transfers/payments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create payment
         * @description Creates the smart transfer payment resource
         */
        post: operations['smart-transfer-payment-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/smart-transfers/payments/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment
         * @description Recovers the smart transfer payment resource by its id
         */
        get: operations['smart-transfer-paymentretrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/boleto-connections': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Connect boleto credentials */
        post: operations['boleto-connection-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/boleto-connections/from-item': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create boleto connection from Item */
        post: operations['boleto-connection-create-from-item'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/boletos': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue Boleto */
        post: operations['boleto-create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/boletos/{id}/cancel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Boleto */
        post: operations['boleto-cancel'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/boletos/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Boleto */
        get: operations['boleto-get'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Bank account additional fields */
        BankData: {
            /** @description Complete number of the bank account `(agency code / account number)` */
            transferNumber?: string;
            /**
             * Format: double
             * @description Balance including not posted transactions
             */
            closingBalance?: number;
            /**
             * Format: double
             * @description Balance automatically invested in the account by the FI
             */
            automaticallyInvestedBalance?: number;
        };
        /** @description Credit account additional fields */
        CreditData: {
            /** @description Card level (Black, Signature) */
            level?: string;
            /** @description Card Brand (Visa, Mastercard, Elo) */
            brand?: string;
            /**
             * Format: date-time
             * @description Date when the balance was closed
             */
            balanceCloseDate?: string;
            /**
             * Format: date-time
             * @description Date when the balance is dued
             */
            balanceDueDate?: string;
            /**
             * Format: double
             * @description Credit limit available to spent
             */
            availableCreditLimit?: number;
            /**
             * Format: double
             * @description Balance in USD
             */
            balanceForeignCurrency?: number;
            /**
             * Format: double
             * @description Minimum payment due
             */
            minimumPayment?: number;
            /**
             * Format: double
             * @description Maximum amount that can be spent
             */
            creditLimit?: number;
            /**
             * @description Credit card status
             * @enum {string}
             */
            status?: 'ACTIVE' | 'BLOCKED' | 'CANCELLED';
            /**
             * @description Credit card holder type
             * @enum {string}
             */
            holderType?: 'MAIN' | 'ADDITIONAL';
            /** @description Disaggregated credit card limits */
            disaggregatedCreditLimits?: components['schemas']['DisaggregatedCreditLimit'][];
            /** @description Additional credit cards associated with the main one */
            additionalCards?: components['schemas']['AdditionalCard'][];
        };
        /** @description Additional credit card data */
        AdditionalCard: {
            /** @description Number of the additional credit card */
            number: string;
        };
        /** @description Disaggregated credit card limit */
        DisaggregatedCreditLimit: {
            /** @description Limit type (LIMITE_CREDITO_TOTAL or LIMITE_CREDITO_MODALIDADE_OPERACAO) */
            creditLineLimitType: string;
            /** @description Indicates if the limit is consolidated or individual */
            consolidationType: string;
            /** @description Identification number of the additional credit card */
            identificationNumber: string;
            /** @description Indicates if the limit is flexible */
            isLimitFlexible: boolean;
            /**
             * Format: double
             * @description Used amount of the additional credit card
             */
            usedAmount: number;
            /** @description Used amount currency code (for example, BRL) */
            usedAmountCurrencyCode: string;
            /** @description Name of the line (for example, 'Limite de Crédito') */
            lineName?: string;
            /** @description Additional information about the line name */
            lineNameAdditionalInfo?: string;
            /**
             * Format: double
             * @description Limit amount of the additional credit card
             */
            limitAmount?: number;
            /** @description Limit amount currency code (for example, BRL) */
            limitAmountCurrencyCode?: string;
            /**
             * Format: double
             * @description Available amount of the additional credit card
             */
            availableAmount?: number;
            /** @description Available amount currency code (for example, BRL) */
            availableAmountCurrencyCode?: string;
        };
        /** @description Account of type bank */
        Account: {
            /**
             * @description Primary account identifier
             * @example a658c848-e475-457b-8565-d1fffba127c4
             */
            id: string;
            /**
             * @description Type of account, may be BANK or CREDIT
             * @example BANK
             * @enum {string}
             */
            type: 'BANK' | 'CREDIT';
            /**
             * @description Subtype of corresponding type of account
             * @example SAVINGS_ACCOUNT
             * @enum {string}
             */
            subtype: 'SAVINGS_ACCOUNT' | 'CHECKING_ACCOUNT' | 'CREDIT_CARD';
            /**
             * @description External identifier of the account
             * @example 40114687/1234
             */
            number: string;
            /**
             * @description Name of the account in a descriptive format
             * @example Conta Corrente
             */
            name: string;
            /**
             * @description Name of the account as defined externally
             * @example SIGNATURE CJA. AHORRO PESOS
             */
            marketingName?: string;
            /**
             * Format: double
             * @description Funds of the account
             * @example 120950
             */
            balance: number;
            /**
             * Format: uuid
             * @description Attached item's primary identifier
             * @example a0922d6f-2007-4169-a181-b961500608db
             */
            itemId: string;
            /**
             * @description Tax ID of the corresponding owner
             * @example 416.799.495-00
             */
            taxNumber?: string;
            /**
             * @description Name of the owner of the account
             * @example John Doe
             */
            owner?: string;
            /**
             * @description Code referencing the currency of the balance
             * @example BRL
             */
            currencyCode: string;
            bankData?: components['schemas']['BankData'];
            creditData?: components['schemas']['CreditData'];
        };
        /** @description Option for ConnectorCredential of type select */
        CredentialSelectOption: {
            /** @description Value for the option */
            value: string;
            /** @description Label for the option */
            label: string;
        };
        /** @description Credential details for a connector */
        ConnectorCredential: {
            /** @description Name of the key */
            name: string;
            /** @description Label for input */
            label: string;
            /**
             * @description Type of credential required
             * @enum {string}
             */
            type: 'text' | 'password' | 'number' | 'image' | 'select';
            /** @description Text to help the user when completing the input */
            assistiveText?: string;
            /** @description Used to return base64 images */
            data?: string;
            /** @description Placeholder text for the input */
            placeholder?: string;
            /** @description Regex validation for the user's input */
            validation?: string;
            /** @description Validation message when input doesn't match the regex */
            validationMessage?: string;
            /** @description Credential is an MFA parameter and must be refreshed on each execution */
            mfa?: boolean;
            /** @description List of possible values for the input */
            options?: components['schemas']['CredentialSelectOption'][];
        };
        /** @description User action details for an item */
        ConnectorUserAction: {
            /** @description Instructions related to the user action */
            instructions: string;
            /** @description '{ [key]:[value] }'. Additional information related to the user action, for exampke in some device authorization flow */
            attributes?: Record<string, never>;
            /**
             * Format: date-time
             * @description User action expiration date
             */
            expiresAt?: string;
        };
        /**
         * @description Connector object
         * @example {
         *       "id": 601,
         *       "name": "Itaú",
         *       "primaryColor": "EC7000",
         *       "institutionUrl": "https://www.itau.com.br",
         *       "country": "BR",
         *       "type": "PERSONAL_BANK",
         *       "credentials": [
         *         {
         *           "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
         *           "validationMessage": "CPF deve ter 11 números.",
         *           "label": "CPF",
         *           "name": "cpf",
         *           "type": "number",
         *           "placeholder": "",
         *           "optional": false
         *         }
         *       ],
         *       "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/201.svg",
         *       "hasMFA": false,
         *       "oauth": true,
         *       "health": {
         *         "status": "ONLINE",
         *         "stage": null
         *       },
         *       "products": [
         *         "ACCOUNTS",
         *         "TRANSACTIONS",
         *         "IDENTITY",
         *         "CREDIT_CARDS",
         *         "PAYMENT_DATA",
         *         "LOANS",
         *         "INVESTMENTS"
         *       ],
         *       "createdAt": "2023-09-01T18:05:09.145Z",
         *       "isSandbox": false,
         *       "isOpenFinance": true,
         *       "updatedAt": "2024-07-16T15:34:08.028Z",
         *       "supportsPaymentInitiation": true,
         *       "supportsScheduledPayments": true,
         *       "supportsSmartTransfers": true,
         *       "supportsBoletoManagement": true
         *     }
         */
        Connector: {
            /**
             * Format: integer
             * @description Primary identifier
             */
            id: number;
            /** @description Name of the institution */
            name?: string;
            /** @description Homepage of the institution */
            institutionUrl?: string;
            /** @description Image of the logo hosted by Pluggy */
            imageUrl?: string;
            /** @description Primary color */
            primaryColor?: string;
            /** @description Type of institution */
            type?: string;
            /** @description Country located */
            country?: string;
            /** @description Parameters required to start the connection */
            credentials?: components['schemas']['ConnectorCredential'][];
            /** @description Does the connector require an MFA to execute? */
            hasMFA?: boolean;
            /** @description Products supported by the connector */
            products?: ('ACCOUNTS' | 'CREDIT_CARDS' | 'TRANSACTIONS' | 'PAYMENT_DATA' | 'INVESTMENTS' | 'INVESTMENTS_TRANSACTIONS' | 'IDENTITY' | 'BROKERAGE_NOTE' | 'MOVE_SECURITY' | 'LOANS')[];
            /** @description If 'true', the connector requires an Oauth flow to execute */
            oauth?: boolean;
            /** @description URL to perform Oauth flow if needed */
            oauthUrl?: string;
            /** @description URL to the financial institution to reset the password */
            resetPasswordUrl?: string;
            health?: components['schemas']['ConnectorHealth'];
            /** @description Indicates if the connector uses the regulated Open Finance APIs */
            isOpenFinance?: boolean;
            /** @description Indicates if the connector supports the payment initiation API */
            supportsPaymentInitiation?: boolean;
            /** @description Indicates if the connector supports scheduled payments */
            supportsScheduledPayments?: boolean;
            /** @description Indicates if the connector supports smart transfers */
            supportsSmartTransfers?: boolean;
            /** @description Indicates if the connector supports boleto management */
            supportsBoletoManagement?: boolean;
            /**
             * Format: date-time
             * @description Date of creation
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date of last modification
             */
            updatedAt?: string;
        };
        /**
         * @description Connector List Response
         * @example {
         *       "page": 1,
         *       "total": 1,
         *       "totalPages": 1,
         *       "results": [
         *         {
         *           "id": 601,
         *           "name": "Itaú",
         *           "primaryColor": "EC7000",
         *           "institutionUrl": "https://www.itau.com.br/assets/dam/publisher/07_itau_empresas/13_open_banking/logos_regulatorio_bacen/opb_log_reg_bac_itau_img_01.svg",
         *           "country": "BR",
         *           "type": "PERSONAL_BANK",
         *           "credentials": [
         *             {
         *               "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
         *               "validationMessage": "CPF deve ter 11 números.",
         *               "label": "CPF",
         *               "name": "cpf",
         *               "type": "number",
         *               "placeholder": "",
         *               "optional": false
         *             }
         *           ],
         *           "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/201.svg",
         *           "hasMFA": false,
         *           "oauth": true,
         *           "health": {
         *             "status": "ONLINE",
         *             "stage": null
         *           },
         *           "products": [
         *             "ACCOUNTS",
         *             "TRANSACTIONS",
         *             "IDENTITY",
         *             "CREDIT_CARDS",
         *             "PAYMENT_DATA",
         *             "LOANS",
         *             "INVESTMENTS"
         *           ],
         *           "createdAt": "2023-09-01T18:05:09.145Z",
         *           "isSandbox": false,
         *           "isOpenFinance": true,
         *           "updatedAt": "2024-07-16T15:34:08.028Z",
         *           "supportsPaymentInitiation": true,
         *           "supportsScheduledPayments": true,
         *           "supportsSmartTransfers": true,
         *           "supportsBoletoManagement": true
         *         }
         *       ]
         *     }
         */
        ConnectorListResponse: {
            /** Format: double */
            page?: number;
            /** Format: double */
            total?: number;
            /** Format: double */
            totalPages?: number;
            results?: components['schemas']['Connector'][];
        };
        /** @description Connector health status */
        ConnectorHealth: {
            /** @description 'ONLINE' | 'OFFLINE' | 'UNSTABLE' */
            status?: string;
            stage?: string;
            /** @description Statistics about your recent connections on the connector and recent connection rate (percentage of healthy connections). This field is only present if you include the parameter healthDetails=true. This will be null if there was an error obtaining health details. */
            details?: {
                /** @description A number from 0 to 100: the percentage of executions that succesfully connect to the institution: status of CONNECTION_ERROR,ERROR,SITE_NOT_AVAILABLE decrease the percentage. Any other status (like SUCCESS/LOGIN_ERROR) increase the percentage. The value will be null if there were no connections */
                connectionRateLast6Hours?: number;
                /** @description Amount of your connections for this connector during the last 6 hours. 0 if there were no connections */
                connectionsLast6Hours?: number;
            };
        };
        /**
         * @description Item object
         * @example {
         *       "id": "e062ab2b-9006-45e8-b689-defabba53647",
         *       "connector": {
         *         "id": 200,
         *         "name": "MeuPluggy",
         *         "primaryColor": "ef294b",
         *         "institutionUrl": "https://meu.pluggy.ai/",
         *         "country": "BR",
         *         "type": "PERSONAL_BANK",
         *         "credentials": [],
         *         "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/sandbox.svg",
         *         "hasMFA": false,
         *         "oauth": true,
         *         "health": {
         *           "status": "ONLINE",
         *           "stage": null
         *         },
         *         "products": [
         *           "ACCOUNTS",
         *           "TRANSACTIONS",
         *           "CREDIT_CARDS",
         *           "INVESTMENTS",
         *           "INVESTMENTS_TRANSACTIONS",
         *           "PAYMENT_DATA",
         *           "IDENTITY",
         *           "BROKERAGE_NOTE"
         *         ],
         *         "createdAt": "2023-09-12T16:44:13.900Z",
         *         "isSandbox": false,
         *         "isOpenFinance": false,
         *         "updatedAt": "2024-11-26T13:33:44.296Z",
         *         "supportsPaymentInitiation": false,
         *         "supportsScheduledPayments": false,
         *         "supportsSmartTransfers": false,
         *         "supportsBoletoManagement": false
         *       },
         *       "createdAt": "2024-09-19T13:10:31.212Z",
         *       "updatedAt": "2024-09-19T13:11:23.613Z",
         *       "status": "UPDATED",
         *       "executionStatus": "SUCCESS",
         *       "lastUpdatedAt": "2024-09-19T13:11:23.595Z",
         *       "webhookUrl": null,
         *       "error": null,
         *       "clientUserId": "gabriel@pluggy.ai",
         *       "consecutiveFailedLoginAttempts": 0,
         *       "statusDetail": null,
         *       "parameter": null,
         *       "userAction": null,
         *       "nextAutoSyncAt": null,
         *       "consentExpiresAt": null,
         *       "products": [
         *         "ACCOUNTS",
         *         "CREDIT_CARDS",
         *         "TRANSACTIONS",
         *         "INVESTMENTS",
         *         "IDENTITY",
         *         "INVESTMENTS_TRANSACTIONS",
         *         "PAYMENT_DATA"
         *       ],
         *       "oauthRedirectUri": null
         *     }
         */
        Item: {
            /** @description Primary identifier */
            id: string;
            connector?: components['schemas']['Connector'];
            /** @description Status of the Item */
            status: string;
            /** @description Status of the sync execution */
            executionStatus: string;
            /** @description Detailed error message */
            error?: {
                /** @description Error code */
                code: string;
                /** @description Detailed error message */
                message: string;
                /** @description Information provider by the institution mainly when user needs to perform an action */
                providerMessage?: string;
                /** @description '{ [key]:[value] }'. Additional information necessary for future executions, used for example in some device authorization flow */
                attributes?: Record<string, never>;
            };
            parameter?: components['schemas']['ConnectorCredential'];
            userAction?: components['schemas']['ConnectorUserAction'];
            /** @description Url to be notified of item changes */
            webhookUrl?: string;
            /**
             * Format: date-time
             * @description Date of creation
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date of last modification
             */
            updatedAt?: string;
            /**
             * Format: date-time
             * @description Date of last syncronization
             */
            lastUpdatedAt?: string;
            statusDetail?: components['schemas']['StatusDetail'];
            /**
             * Format: date-time
             * @description Date of next auto-sync, or null if auto-sync is disabled for this Item
             */
            nextAutoSyncAt?: string;
            /**
             * Format: integer
             * @description Consecutives execution that ends up with a LOGIN_ERROR status
             */
            consecutiveFailedLoginAttempts?: number;
            /**
             * Format: date-time
             * @description Consent expiration date
             */
            consentExpiresAt?: string;
            /** @description Products collected by the item */
            products?: ('ACCOUNTS' | 'CREDIT_CARDS' | 'TRANSACTIONS' | 'PAYMENT_DATA' | 'INVESTMENTS' | 'INVESTMENTS_TRANSACTIONS' | 'IDENTITY' | 'BROKERAGE_NOTE' | 'MOVE_SECURITY' | 'LOANS')[];
        };
        /**
         * @description Create Item Request
         * @example {
         *       "connectorId": 2,
         *       "parameters": {
         *         "user": "user-ok",
         *         "password": "password-ok"
         *       },
         *       "webhookUrl": "https://example.com/webhook"
         *     }
         */
        CreateItem: {
            /** @description Primary identifier of the connector */
            connectorId: number;
            /** @description Connector's credentials that are required to execute on a Key-Value object or a string if they are encrypted */
            parameters: {
                [key: string]: string;
            } & (Record<string, never> | string);
            /**
             * Format: uri
             * @description Url to be notified of item changes
             */
            webhookUrl?: string;
            /** @description Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use. */
            clientUserId?: string;
            /**
             * Format: uri
             * @description Redirect URI required for the Oauth flow
             */
            oauthRedirectUri?: string;
            /** @description Products to be collected in the connection */
            products?: ('ACCOUNTS' | 'CREDIT_CARDS' | 'TRANSACTIONS' | 'PAYMENT_DATA' | 'INVESTMENTS' | 'INVESTMENTS_TRANSACTIONS' | 'IDENTITY' | 'BROKERAGE_NOTE' | 'MOVE_SECURITY' | 'LOANS')[];
            /** @description Avoids creating a new item if there is already one with the same credentials */
            avoidDuplicates?: boolean;
        };
        /**
         * @description Update Item Request
         * @example {
         *       "webhookUrl": "https://example.com/webhook",
         *       "clientUserId": "My User App Id",
         *       "parameters": {
         *         "user": "user-ok",
         *         "password": "password-ok"
         *       }
         *     }
         */
        UpdateItem: {
            /** @description Parameters to update on the item stored credentials. */
            parameters?: {
                [key: string]: string;
            } & (Record<string, never> | string);
            /** @description Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use. */
            clientUserId?: string;
            /**
             * Format: uri
             * @description Url to be notified of item changes
             */
            webhookUrl?: string;
            /** @description Products to be collected in the connection */
            products?: ('ACCOUNTS' | 'CREDIT_CARDS' | 'TRANSACTIONS' | 'PAYMENT_DATA' | 'INVESTMENTS' | 'INVESTMENTS_TRANSACTIONS' | 'IDENTITY' | 'BROKERAGE_NOTE' | 'MOVE_SECURITY' | 'LOANS')[];
        };
        /**
         * @description Detailed status of the item. This field will be present when the status is PARTIAL_SUCCESS or when a product in the item has warnings
         * @example {
         *       "accounts": {
         *         "isUpdated": true,
         *         "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
         *       },
         *       "identity": {
         *         "isUpdated": false,
         *         "lastUpdatedAt": null
         *       },
         *       "creditCards": {
         *         "isUpdated": true,
         *         "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
         *       },
         *       "investments": {
         *         "isUpdated": true,
         *         "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
         *       },
         *       "transactions": {
         *         "isUpdated": true,
         *         "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
         *       },
         *       "paymentData": null
         *     }
         */
        StatusDetail: {
            accounts?: components['schemas']['StatusDetailProduct'];
            creditCards?: components['schemas']['StatusDetailProduct'];
            transactions?: components['schemas']['StatusDetailProduct'];
            investments?: components['schemas']['StatusDetailProduct'];
            identity?: components['schemas']['StatusDetailProduct'];
            investmentsTransactions?: components['schemas']['StatusDetailProduct'];
            paymentData?: components['schemas']['StatusDetailProduct'];
            loans?: components['schemas']['StatusDetailProduct'];
        };
        /**
         * @description Detailed status of the product
         * @example {
         *       "isUpdated": true,
         *       "lastUpdatedAt": "2022-03-08T22:43:04.796Z"
         *     }
         */
        StatusDetailProduct: {
            /**
             * Format: date-time
             * @description Date when the product was last updated
             */
            lastUpdatedAt?: string;
            /** @description Product was updated in the last execution */
            isUpdated?: boolean;
            /** @description Warnings about the product data. For example, a warning about missing permissions for viewing a product */
            warnings?: components['schemas']['StatusDetailProductWarning'][];
        };
        StatusDetailProductWarning: {
            /** @description The warning code generated by Pluggy */
            code: string;
            /** @description The warning message in english generated by Pluggy */
            message: string;
            /** @description The warning message from the FI if provided */
            providerMessage?: string;
        };
        /**
         * @description Deletion response
         * @example {
         *       "count": 1
         *     }
         */
        ICountResponse: {
            /** @description Amount of items deleted */
            count: number;
        };
        Webhook: {
            /** @description UUID identifier for the entity */
            id: string;
            /** @description Url to be notified of item changes */
            url: string;
            /** @enum {string} */
            event: 'all' | 'item/created' | 'item/updated' | 'item/error' | 'item/deleted' | 'item/waiting_user_input' | 'item/waiting_user_action' | 'item/login_succeeded' | 'connector/status_updated' | 'payment_request/updated';
            /**
             * Format: date-time
             * @description Date when the webhook was disabled
             */
            disabledAt?: string;
            /**
             * Format: date-time
             * @description Date when it was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date of the last update
             */
            updatedAt?: string;
        };
        CreateWebhook: {
            url: string;
            /** @enum {string} */
            event: 'all' | 'item/created' | 'item/updated' | 'item/error' | 'item/deleted' | 'item/waiting_user_input' | 'item/waiting_user_action' | 'item/login_succeeded' | 'connector/status_updated' | 'transactions/created' | 'transactions/updated' | 'transactions/deleted' | 'payment_intent/created' | 'payment_intent/completed' | 'payment_intent/waiting_payer_authorization' | 'payment_intent/error' | 'scheduled_payment/created' | 'scheduled_payment/completed' | 'scheduled_payment/error' | 'scheduled_payment/canceled' | 'scheduled_payment/all_completed' | 'payment_refund/completed' | 'payment_refund/error' | 'boleto/updated' | 'payment_request/updated';
            /** @description HTTP headers that will be included in the webhook notifications (useful for things like authorization) */
            headers?: Record<string, never>;
        };
        ParameterValidationError: {
            code: string;
            message: string;
            parameter: string;
        };
        /**
         * @description Key-Value credentials neccesary to create an item
         * @example {
         *       "user": "my-user",
         *       "password": "my-password"
         *     }
         */
        ItemParameter: {
            [key: string]: string;
        };
        /**
         * @description Credentials neccesary to create a payment intent
         * @example {
         *       "cpf": "416.799.495-00",
         *       "cnpj": "41.679.495/0001-00"
         *     }
         */
        PaymentIntentParameter: {
            /** @description CPF of the payer */
            cpf: string;
            /** @description CNPJ of the payer */
            cnpj?: string;
            /** @description Name of the payer. Only required for automatic pix payment requests. */
            name?: string;
        };
        /**
         * @description Response to parameter's validations
         * @example {
         *       "parameters": {
         *         "user": "my-user",
         *         "password": "1234"
         *       },
         *       "errors": [
         *         {
         *           "code": "002",
         *           "message": "A senha deve ter pelo menos 6 dígitos.",
         *           "parameter": "password",
         *           "data": {
         *             "min": 6
         *           }
         *         }
         *       ]
         *     }
         */
        ParameterValidationResponse: {
            errors?: components['schemas']['ParameterValidationError'][];
            parameters?: components['schemas']['ItemParameter'];
        };
        /** @description Document object containing type & value */
        Document: {
            /**
             * @description Type of document
             * @example CPF
             * @enum {string}
             */
            type?: 'CPF' | 'CNPJ';
            /**
             * @description Formatted value of the document
             * @example 416.799.495-00
             */
            value?: string;
        };
        /** @description Participant of the payment data */
        PaymentDataParticipant: {
            documentNumber?: components['schemas']['Document'];
            /** @description Fullname of the participant */
            name?: string;
            /** @description Account number on the branch */
            accountNumber?: string;
            /** @description Agency number */
            branchNumber?: string;
            /** @description COMPE Bank number */
            routingNumber?: string;
            /** @description ISPB Bank number */
            routingNumberISPB?: string;
        };
        /** @description Payment or Transfer participant's data */
        PaymentData: {
            payer?: components['schemas']['PaymentDataParticipant'];
            receiver?: components['schemas']['PaymentDataParticipant'];
            /** @description User's motive submitted while making the transfer */
            reason?: string;
            /** @description Reference number for the transfer/payment */
            referenceNumber?: string;
            /** @description String submitted by the receiver associated with the payment when generating the payment request. */
            receiverReferenceId?: string;
            /** @description Type of transfer. TED, DOC, PIX, TEV or BOLETO */
            paymentMethod?: string;
            boletoMetadata?: components['schemas']['PaymentDataBoletoMetadata'];
        };
        /** @description Merchant extracted from the transaction data */
        Merchant: {
            /** @description Merchants name */
            name?: string;
            /** @description Merchant legal business name */
            businessName?: string;
            /** @description Document number related to the merchant */
            cnpj?: string;
            /** @description Economic activity classification number related to the merchant */
            cnae?: string;
            /** @description Merchant associated category */
            category?: string;
        };
        /** @description Data of a transaction specific to credit card transactions */
        CreditCardMetadata: {
            /** @description Number of the current installment of the purchase */
            installmentNumber?: number;
            /** @description Total number of installments of the purchase */
            totalInstallments?: number;
            /** @description Total amount of the purchase */
            totalAmount?: number;
            /**
             * Format: date-time
             * @description Original Date of the purchase
             */
            purchaseDate?: string;
            /** @description Merchant Category Code of the merchant */
            payeeMCC?: string;
            /** @description Credit Card Number associated with transaction, can be different from the account if its done by an additional or virtual card. */
            cardNumber?: string;
            /** @description Id of the bill associated to this transaction */
            billId?: string;
        };
        /**
         * @description Transaction product
         * @example {
         *       "id": "6ec156fe-e8ac-4d9a-a4b3-7770529ab01c",
         *       "description": "TED Example",
         *       "descriptionRaw": null,
         *       "currencyCode": "BRL",
         *       "amount": 1500,
         *       "date": "2020-10-14T00:00:00.000Z",
         *       "balance": 3500,
         *       "category": "Transfers",
         *       "categoryId": "05000000",
         *       "accountId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
         *       "providerCode": "123456",
         *       "type": "CREDIT",
         *       "status": "POSTED",
         *       "paymentData": {
         *         "payer": {
         *           "name": "Tiago Rodrigues Santos",
         *           "branchNumber": "090",
         *           "accountNumber": "1234-5",
         *           "routingNumber": "001",
         *           "documentNumber": {
         *             "type": "CPF",
         *             "value": "882.937.076-23"
         *           }
         *         },
         *         "reason": "Taxa de serviço",
         *         "receiver": {
         *           "name": "Pluggy",
         *           "branchNumber": "999",
         *           "accountNumber": "9876-1",
         *           "routingNumber": "002",
         *           "documentNumber": {
         *             "type": "CNPJ",
         *             "value": "08.050.608/0001-32"
         *           }
         *         },
         *         "paymentMethod": "TED",
         *         "referenceNumber": "123456789"
         *       },
         *       "merchant": null,
         *       "providerId": null
         *     }
         */
        Transaction: {
            /** @description Primary identifier of the transaction */
            id: string;
            /** @description Clean description of the transaction */
            description: string;
            /** @description Currency ISO code */
            currencyCode: string;
            /**
             * Format: double
             * @description Transaction amount
             */
            amount: number;
            /**
             * Format: double
             * @description Transaction amount in Account's Currency. Only present if the transaction is in a different currency than the account's currency
             */
            amountInAccountCurrency?: number;
            /**
             * Format: date-time
             * @description Date when the transaction was made
             */
            date: string;
            /**
             * @description Type of the transaction. DEBIT (outflow) or CREDIT (inflow)
             * @enum {string}
             */
            type?: 'DEBIT' | 'CREDIT';
            /**
             * Format: double
             * @description Balance after the transaction
             */
            balance?: number;
            /** @description Institution provided code */
            providerCode?: string;
            /** @description Status of the movement. POSTED / PENDING */
            status?: string;
            /** @description Category of the transaction (e.g. Restaurants, Education). See the Transaction Categorization section in our guides. */
            category?: string;
            /** @description Id of the transaction category. Can be used to identify the category in the Categories endpoint */
            categoryId?: string;
            paymentData?: components['schemas']['PaymentData'];
            creditCardMetadata?: components['schemas']['CreditCardMetadata'];
            merchant?: components['schemas']['Merchant'];
            /** @description Type of operation classified by the institution. */
            operationType?: string;
            /** @description Provider's identifier for the transaction. Only returned for Open Finance connectors. */
            providerId?: string;
        };
        PageResponseTransactions: {
            results: components['schemas']['Transaction'][];
            /** Format: double */
            page: number;
            /** Format: double */
            total: number;
            /** Format: double */
            totalPages: number;
        };
        /**
         * @description Update transaction category request body
         * @example {
         *       "categoryId": "07010000"
         *     }
         */
        UpdateTransaction: {
            /** @description Identifier of the category */
            categoryId: string;
        };
        /**
         * @description Cateogry response
         * @example {
         *       "id": "01010000",
         *       "description": "Salary/pro-labore",
         *       "parentId": "01000000",
         *       "parentDescription": "Income"
         *     }
         */
        Category: {
            /** @description Identifier for the category */
            id: string;
            /** @description Description of the category */
            description: string;
            /** @description Description of the category, translated to portuguese */
            descriptionTranslated?: string;
            /** @description Parent's identifier */
            parentId?: string;
            /** @description Parent's category description */
            parentDescription?: string;
        };
        /**
         * @description Category rule by client id
         * @example {
         *       "description": "uber payment",
         *       "category": "Salary/pro-labore",
         *       "categoryId": "05000000",
         *       "clientId": "03cc0eff-4ec5-495c-adb3-1ef9611624fc",
         *       "transactionType": "DEBIT",
         *       "accountType": "CHECKING_ACCOUNT"
         *     }
         */
        ClientCategoryRule: {
            /** @description Description of the transaction rule. */
            description: string;
            /** @description Identifier of the category */
            categoryId?: string;
            /** @description Description of the category */
            category: string;
            /** @description Identifier of the client */
            clientId?: string;
            /** @description Transaction type (DEBIT/CREDIT) */
            transactionType?: string;
            /** @description Account type (CHECKING_ACCOUNT/CREDIT_CARD) */
            accountType?: string;
        };
        /**
         * @description Create client category rule
         * @example {
         *       "description": "uber payment",
         *       "categoryId": "05000000",
         *       "transactionType": "DEBIT",
         *       "accountType": "CHECKING_ACCOUNT"
         *     }
         */
        CreateClientCategoryRule: {
            /** @description Description of the transaction rule. */
            description: string;
            /** @description Identifier of the category */
            categoryId: string;
            /** @description Transaction type (DEBIT/CREDIT) */
            transactionType?: string;
            /** @description Account type (CHECKING_ACCOUNT/CREDIT_CARD) */
            accountType?: string;
            /** @description Type of match used to identify the rule (exact/contains/startsWith/endsWith), if not provided, defaults to 'exact' */
            matchType?: string;
        };
        /** @description Taxes and fees that applied to the transaction */
        InvestmentExpenses: {
            /**
             * Format: double
             * @description (ISS) Service tax that varies according to state
             */
            serviceTax?: number;
            /**
             * Format: double
             * @description Commission charged by the brokerage for carrying out transactions on the stock market
             */
            brokerageFee?: number;
            /**
             * Format: double
             * @description (IRRF) Income Tax Withholding, amount paid to the Internal Revenue Service
             */
            incomeTax?: number;
            /**
             * Format: double
             * @description (ANA) Fee of Notice of Trading in Assets
             */
            tradingAssetsNoticeFee?: number;
            /**
             * Format: double
             * @description (termo/opções) Fees charged by BM&F Bovespa in negotiations
             */
            maintenanceFee?: number;
            /**
             * Format: double
             * @description Liquidation fee for the settlement of a position on the expiration date or the financial settlement of physical delivery
             */
            settlementFee?: number;
            /**
             * Format: double
             * @description Registration fee
             */
            clearingFee?: number;
            /**
             * Format: double
             * @description (Emolumentos) Fees charged by BM&F Bovespa as a source of operating income
             */
            stockExchangeFee?: number;
            /**
             * Format: double
             * @description Fee by brokers to keep recordsin their home broker systems or on the trading desk
             */
            custodyFee?: number;
            /**
             * Format: double
             * @description Amount paid to the Operator for the intermediation service
             */
            operatingFee?: number;
            /**
             * Format: double
             * @description Sum of other not defined expenses
             */
            other?: number;
        };
        /** @description Movement of the investment */
        InvestmentTransaction: {
            /** @description Primary investment transaction identifier */
            id: string;
            /**
             * @description Type of transactions
             * @enum {string}
             */
            type: 'BUY' | 'SELL' | 'TAX' | 'TRANSFER' | 'INTEREST' | 'AMORTIZATION';
            /**
             * @description Type of movement of the transaction
             * @enum {string}
             */
            movementType?: 'CREDIT' | 'DEBIT';
            /**
             * Format: double
             * @description Quantity of the transaction
             */
            quantity?: number;
            /**
             * Format: double
             * @description Value on the transaction's Date
             */
            value?: number;
            /**
             * Format: double
             * @description Gross amount of the operation. May be null only if type is TRANSFER
             */
            amount?: number;
            /**
             * Format: double
             * @description Agreed rate for treasury applications
             */
            agreedRate?: number;
            /**
             * Format: date-time
             * @description Date when the transaction was made
             */
            date: string;
            /**
             * Format: date-time
             * @description Date when the transaction was confirmed
             */
            tradeDate?: string;
            expenses?: components['schemas']['InvestmentExpenses'];
        };
        PageResponseInvestmentTransactions: {
            results: components['schemas']['InvestmentTransaction'][];
            /** Format: double */
            page: number;
            /** Format: double */
            total: number;
            /** Format: double */
            totalPages: number;
        };
        PageResponseCategoryRules: {
            results: components['schemas']['ClientCategoryRule'][];
            /** Format: double */
            page: number;
            /** Format: double */
            total: number;
            /** Format: double */
            totalPages: number;
        };
        /** @description Investment metadata for Previdencia migrations */
        InvestmentMetadata: {
            /** @description Description of the type of tax applied to previdencia */
            taxRegime?: string;
            /** @description Previdencial proposal number */
            proposalNumber?: string;
            /** @description Number of the process of a previdencia */
            processNumber?: string;
            /** @description Name of the fund associated with the previdencia. */
            fundName?: string;
            /** @description Insurer of the Security Investment */
            insurer?: components['schemas']['Company'];
        };
        /** @description Company object that holds the company's information */
        Company: {
            /** @description Name of the company */
            name?: string;
            /** @description CNPJ of the company */
            cnpj?: string;
        };
        /**
         * @description Investment representing a specific asset
         * @example {
         *       "id": "f77eccf4-7714-498e-92a9-1bebe70335d9",
         *       "code": "12.345.678/0001-00",
         *       "name": "Bahia AM Advisory FIC de FIM",
         *       "balance": 1359.39,
         *       "currencyCode": "BRL",
         *       "type": "MUTUAL_FUND",
         *       "subtype": "MULTIMARKET_FUND",
         *       "lastMonthRate": 0.24,
         *       "annualRate": 3.24,
         *       "lastTwelveMonthsRate": 3,
         *       "itemId": "207f5bcd-312a-439c-abbe-166b6632c980",
         *       "value": 500,
         *       "quantity": 3,
         *       "amount": 1500,
         *       "taxes": 40.61,
         *       "taxes2": 100,
         *       "date": "2020-07-19T18:27:41.802Z",
         *       "owner": "John Doe",
         *       "number": null,
         *       "amountProfit": 310.5,
         *       "amountWithdrawal": 1310.5,
         *       "amountOriginal": 1000,
         *       "status": "ACTIVE",
         *       "transactions": [
         *         {
         *           "tradeDate": "2020-10-01T00:00:00.000Z",
         *           "date": "2020-10-01T00:00:00.000Z",
         *           "description": "Aplicação Fondo de Investimento Premium",
         *           "quantity": 1.25,
         *           "value": 2,
         *           "amount": 5,
         *           "type": "BUY",
         *           "movementType": "CREDIT"
         *         }
         *       ]
         *     }
         */
        Investment: {
            /** @description Primary identifier */
            id: string;
            /**
             * Format: uuid
             * @description Identifier of the item linked to the investment
             */
            itemId: string;
            /**
             * @description Investment Asset type
             * @enum {string}
             */
            type: 'COE' | 'EQUITY' | 'ETF' | 'FIXED_INCOME' | 'MUTUAL_FUND' | 'SECURITY' | 'OTHER';
            /**
             * @description Investment subtype, depends on the type
             * @enum {string}
             */
            subtype?: 'STRUCTURED_NOTE' | 'STOCK' | 'ETF' | 'REAL_ESTATE_FUND' | 'BDR' | 'DERIVATIVES' | 'OPTION' | 'TREASURY' | 'LCI' | 'LCA' | 'LF' | 'CDB' | 'CRI' | 'CRA' | 'CORPORATE_DEBT' | 'LC' | 'DEBENTURES' | 'INVESTMENT_FUND' | 'MULTIMARKET_FUND' | 'FIXED_INCOME_FUND' | 'STOCK_FUND' | 'ETF_FUND' | 'OFFSHORE_FUND' | 'FIP_FUND' | 'EXCHANGE_FUND' | 'RETIREMENT' | 'OTHER';
            /** @description Reference number for this holder's asset */
            number?: string;
            /**
             * Format: double
             * @description The current net balance amount of the investment
             */
            balance: number;
            /** @description Name on the provider */
            name: string;
            /**
             * Format: double
             * @description The performance rate of the investment in the last month
             */
            lastMonthRate?: number;
            /**
             * Format: double
             * @description The performance rate of the investment in the last 12 months
             */
            lastTwelveMonthsRate?: number;
            /**
             * Format: double
             * @description The performance rate of the investment in the last year
             */
            annualRate?: number;
            /** @description Currency ISO code for the amounts */
            currencyCode: string;
            /** @description Associated Code for the investment. For example, the code for a mutual fund is the CNPJ */
            code?: string;
            /** @description 12-character ISIN, a globally unique identifier */
            isin?: string;
            /**
             * Format: double
             * @description Quota's current value at "date"
             */
            value?: number;
            /**
             * Format: double
             * @description Quantity of quota at disposal
             */
            quantity?: number;
            /**
             * Format: double
             * @description Gross amount of the investment
             */
            amount?: number;
            /**
             * Format: double
             * @description Income taxes applied to the investment
             */
            taxes?: number;
            /**
             * Format: double
             * @description Financial taxes applied to the investment
             */
            taxes2?: number;
            /**
             * Format: date-time
             * @description Value's quota date
             */
            date: string;
            /** @description Owner/beneficiary associated with the investment */
            owner?: string;
            /**
             * Format: double
             * @description Profit/Loss to date over the investment
             */
            amountProfit?: number;
            /**
             * Format: double
             * @description The amount available to withdraw
             */
            amountWithdrawal?: number;
            /**
             * Format: double
             * @description Amount originally invested
             */
            amountOriginal?: number;
            /** @description Security Portability details */
            metadata?: components['schemas']['InvestmentMetadata'];
            /**
             * Format: date-time
             * @description Expiration Date
             */
            dueDate?: string;
            /** @description The entity that issued the investment */
            issuer?: string;
            /** @description The entity CNPJ that issued the investment */
            issuerCNPJ?: string;
            /**
             * Format: date-time
             * @description The date that the investment was issued
             */
            issueDate?: string;
            /**
             * Format: double
             * @description Fixed rate percentage applied to the investment
             */
            rate?: number;
            /** @description Type of fixed-rate */
            rateType?: string;
            /**
             * Format: double
             * @description Fixed income annual rate
             */
            fixedAnnualRate?: number;
            /**
             * @description Current status of the investment enum value
             * @enum {string}
             */
            status?: 'ACTIVE' | 'PENDING' | 'TOTAL_WITHDRAWAL';
        };
        /** @description The phone number object contains data related to contact information. */
        PhoneNumber: {
            /**
             * @description Type of phone number: personal, work or residencial
             * @enum {string}
             */
            type?: 'Personal' | 'Work' | 'Residencial';
            /** @description The complete phone number */
            value: string;
        };
        /** @description The email object contains emails associated with the owner of the account */
        Email: {
            /** @enum {string} */
            type?: 'Personal' | 'Work';
            /** @description The full email of the person. */
            value: string;
        };
        /** @description The address object contains data related to an specific owner's location. */
        Address: {
            /** @description Full address using all components available */
            fullAddress?: string;
            /** @description Primary address, stret name and street number */
            primaryAddress?: string;
            /** @description The complete city name */
            city?: string;
            /** @description The Zip code */
            postalCode?: string;
            /** @description The state or province */
            state?: string;
            /** @description The complete country name */
            country?: string;
            /**
             * @description Type of address, Personal or Work
             * @enum {string}
             */
            type?: 'Personal' | 'Work';
            /** @description Additional address information such as apartment number, complement, or other details */
            additionalInfo?: string;
        };
        /** @description The relation object contains name and relation to the owner of the account */
        IdentityRelation: {
            /**
             * @description Type of relation: Father, Mother or Spouse
             * @enum {string}
             */
            type?: 'Mother' | 'Father' | 'Spouse';
            /** @description The full name of the person */
            name?: string;
            /** @description Primary document of the person */
            document?: string;
        };
        /** @description Response with details personal information related to the owner of the connection's account */
        IdentityResponse: {
            /** @description The ID of the identity to retrieve */
            id: string;
            /**
             * Format: uuid
             * @description Identifier of the item linked to the identity
             */
            itemId: string;
            /**
             * Format: date-time
             * @description Date of birth
             */
            birthDate?: string;
            /** @description The tax ID (CNPJ) associated with the business account */
            taxNumber?: string;
            /** @description Primary document that identifies the owner */
            document?: string;
            /** @description Type of document collected */
            documentType?: string;
            /** @description Profession or Job information */
            jobTitle?: string;
            /** @description Name of the owner of the account */
            fullName?: string;
            /** @description Establishment code (only for PAYMENT_ACCOUNT connectors) */
            establishmentCode?: string;
            /** @description Name of the establishment (only for PAYMENT_ACCOUNT connectors) */
            establishmentName?: string;
            /** @description For business connector, the name of the business */
            companyName?: string;
            /** @description List of phone numbers related to the account */
            phoneNumbers?: components['schemas']['PhoneNumber'][];
            /** @description List of email addresses related to the account */
            emails?: components['schemas']['Email'][];
            /** @description List of addresses related to the account */
            addresses?: components['schemas']['Address'][];
            /** @description List of names related to the account */
            relations?: components['schemas']['IdentityRelation'][];
            /**
             * @description Is a rating that indicates the investor personality and motivation for investing
             * @enum {string}
             */
            investorProfile?: 'Conservative' | 'Moderate' | 'Aggressive';
            /** @description Information that allows understanding since when the consulted person has been a client of the institution, as well as an indicator of the products and services they currently consume and their representatives */
            qualifications?: {
                /** @description CNPJ of the company */
                companyCnpj: string;
                /**
                 * @description Occupation code
                 * @enum {string}
                 */
                occupationCode?: 'RECEITA_FEDERAL' | 'CBO' | 'OUTRO';
                /** @description Informed income */
                informedIncome?: {
                    /**
                     * @description Frequency of the informed income
                     * @enum {string}
                     */
                    frequency: 'DIARIA' | 'SEMANAL' | 'QUINZENAL' | 'MENSAL' | 'BIMESTRAL' | 'TRIMESTRAL' | 'SEMESTRAL' | 'ANUAL' | 'OUTROS';
                    /** @description Amount of the informed income */
                    amount: number;
                    /**
                     * Format: date-time
                     * @description Date when the income was informed
                     */
                    date: string;
                };
                /** @description Informed patrimony */
                informedPatrimony?: {
                    /** @description Amount of the informed patrimony */
                    amount: number;
                    /** @description Year of the patrimony */
                    year: number;
                };
            };
            /** @description Information that allows institutions to assess, evaluate, characterize, and classify the client with the purpose of understanding their risk profile and their economic-financial capacity */
            financialRelationships?: {
                /**
                 * Format: date-time
                 * @description Date when the relationship with the institution started
                 */
                startDate: string;
                /** @description List of products and services that the client consumes */
                productsServicesType: string[];
                /** @description List of procurators of the client */
                procurators: {
                    /**
                     * @description Type of relationship with the client
                     * @enum {string}
                     */
                    type: 'REPRESENTANTE_LEGAL' | 'PROCURADOR';
                    /** @description CPF of the procurator */
                    cpfNumber: string;
                    /** @description Civil name of the procurator */
                    civilName: string;
                    /** @description Social name of the procurator */
                    socialName?: string;
                }[];
                /** @description List of accounts of the client with valid consent. Only accounts that have explicit user consent are returned. */
                accounts?: {
                    /** @description COMPE code of the account */
                    compeCode: string;
                    /** @description Branch code of the account */
                    branchCode: string;
                    /** @description Number of the account */
                    number: string;
                    /** @description Check digit of the account */
                    checkDigit: string;
                    /** @description Type of the account */
                    type: string;
                    /** @description Subtype of the account */
                    subtype: string;
                }[];
            };
        };
        /**
         * @description Connect token response
         * @example {
         *       "accessToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6IjI3MzY0YjRhLTM1NGUtNDc5ZC04OWJkLTA1Y2VmNDc2ZTFmNCIsImRhdGEiOiI4NmYyMjIwNDVkNjc3NDJjZjI5MjhjMGNmNjBlZjFkZjo5MjRmNGZlNjg5YWM1NGI2ZmVmMzkzZDc2ZTExNjAxZTI1MjliNmUyNDY1Y2I4ZDkxMWI3ZDY0ZjA5Y2NkYzBiMzg4YWFjZWNkZmQzMGMzZGZiNTBkNzk1OTA1Y2QyNWZlZmEyODZhMWQ0NDc5YzYyNzgwZDZiMzBlNDZiYTY3YjUyZDRkMmIwNWU0ODVjYzk5NjZiYzJjMDUyNDE5OTgzNjBjYTVkM2M4MTJhODQ0ODI1NDI2NDJhNWNkNjhjMTU3YjUzYThkOGEyOGZlMWM4ZDkxNmYzZjZlOTQ0MzEyYjBjNzNmZDBhYmIyYTk0MDU2MzZhYjMxM2RkMmY0OTE0IiwiaWF0IjoxNjQwNjk3MjUwLCJleHAiOjE2NDA2OTkwNTB9.i9DpZ_sOW_I9yGUUXqUWcB9zqCJEXQnjaUrwmcVOXX3F1-he3LjT2f8mHbt7DOvxHtxqAagZkW8BT3J2OBYDOzmHuBgKbbSUmb4YLfC8PaKf2p7fY0fKVu30iIFqiM5CgDQ048dIWzWSlGAYZq00edD0BYlfOkU3ll7OofzmDUAG6KBRDx68FrtYxboNJa8sXli7WSAI3nzZDhcVyPJvqlMHG6VXbJboQrxnSEBGdpGBQ7n_-2G5Oa3-MHCR-Z5cKx1pi4NwqorGFg1c2uRj3F4GdRs94UkqlvdH6FRxAUD3SVDiegvQ6vkOWCHpD1-wZELOmenkJ7ecjg9CChPavx"
         *     }
         */
        ConnectTokenResponse: {
            /** @description Connect token that's used to initialize Pluggy's Connect widget */
            accessToken: string;
        };
        /**
         * @description Authentication confirmed response to interact with the api
         * @example {
         *       "apiKey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
         *     }
         */
        AuthResponse: {
            /** @description Authentication key for the API */
            apiKey: string;
        };
        /**
         * @description Authentication parameters required to get access to Pluggy's API
         * @example {
         *       "clientId": "f8c9b8f0-b8e2-4f0f-b8e2-4f0f8e2f0f8e2",
         *       "clientSecret": "UZzp2n7eMThpfZ74Xf7"
         *     }
         */
        AuthRequest: {
            /**
             * Format: uuid
             * @description Client id
             */
            clientId: string;
            /** @description Client secret */
            clientSecret: string;
        };
        /**
         * @description Create a connect token request payload
         * @example {
         *       "itemId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "options": {
         *         "webhookUrl": "https://example.com/webhook",
         *         "clientUserId": "My App UserId",
         *         "oauthRedirectUri": "https://pluggy.ai/demo",
         *         "avoidDuplicates": true
         *       }
         *     }
         */
        ConnectTokenRequest: {
            /**
             * Format: uuid
             * @description Item identifier to allow Connect Widget to performan an update on it.
             */
            itemId?: string;
            options?: components['schemas']['ItemOptions'];
        };
        /** @description Item options available to send through connect tokens */
        ItemOptions: {
            /** @description Client's external identifier for the user, it can be a ID, UUID or even an email. This is free for clients to use. */
            clientUserId?: string;
            /** @description Url to be notified of this specific item changes */
            webhookUrl?: string;
            /** @description Url to redirect the user after the connect flow */
            oauthRedirectUri?: string;
            /** @description Avoids creating a new item if there is already one with the same credentials */
            avoidDuplicates?: boolean;
        };
        /** Item Creation Error Schema */
        ItemCreationErrorResponse: {
            code?: number;
            /** @description Distinctive code description, useful to identify the error. */
            codeDescription?: string;
            message?: string;
            /** @description List of errors related to parameter validations */
            errors?: components['schemas']['ParameterValidationError'][];
        };
        /**
         * Webhook Creation Error Schema
         * @example {
         *       "code": 400,
         *       "message": "Webhook url must be valid URL address and not localhost'"
         *     }
         */
        WebhookCreationErrorResponse: {
            code?: number;
            message?: string;
        };
        /**
         * Unauthenticated response
         * @example {
         *       "code": 403,
         *       "message": "Missing or invalid authorization token"
         *     }
         */
        NotAuthenticatedResponse: {
            code?: number;
            message?: string;
        };
        /**
         * Global Error Response Schema
         * @example {
         *       "code": 500,
         *       "codeDescription": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal Server Error"
         *     }
         */
        GlobalErrorResponse: {
            code: number;
            message: string;
            /** @description Distinctive code description, useful to distinguish the error. */
            codeDescription?: string;
            /** @description Additional data related to the error, if any */
            data?: Record<string, never>;
        };
        /**
         * @description Response with information related to a loan
         * @example {}
         */
        Loan: {
            /** @description Primary identifier */
            id: string;
            /**
             * Format: uuid
             * @description Identifier of the item linked to the loan
             */
            itemId: string;
            /** @description Contract number given by the contracting institution */
            contractNumber?: string;
            /** @description Standard contract number - IPOC (Identificação Padronizada da Operação de Crédito) */
            ipocCode?: string;
            /** @description Denomination/Identification of the name of the credit operation disclosed to the customer */
            productName: string;
            /** @description Loan type (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractProductSubTypeLoans) */
            type?: string;
            /**
             * Format: date-time
             * @description Date when the loan data was collected
             */
            date: string;
            /**
             * Format: date-time
             * @description Date when the loan was contracted
             */
            contractDate?: string;
            /** @description Disbursement date of the contracted amount */
            disbursementDates?: string[];
            /**
             * Format: date-time
             * @description Loan settlement date
             */
            settlementDate?: string;
            /** @description Loan contracted value */
            contractAmount?: number;
            /**
             * @description Code referencing the currency of the loan
             * @example BRL
             */
            currencyCode: string;
            /**
             * Format: date-time
             * @description Loan due date
             */
            dueDate?: string;
            /**
             * @description Installments regular frequency
             * @enum {string}
             */
            installmentPeriodicity?: 'WITHOUT_REGULAR_PERIODICITY' | 'WEEKLY' | 'FORTNIGHTLY' | 'MONTHLY' | 'BIMONTHLY' | 'QUARTERLY' | 'SEMESTERLY' | 'YEARLY' | 'OTHERS';
            /** @description Mandatory field to complement the information regarding the regular payment frequency when installmentPeriodicity has value 'OTHERS' */
            installmentPeriodicityAdditionalInfo?: string;
            /**
             * Format: date-time
             * @description First installment due date
             */
            firstInstallmentDueDate?: string;
            /** @description CET - Custo Efetivo Total must be expressed as an annual percentage rate and incorporates all charges and expenses incurred in credit operations (interest rate, but also tariffs, taxes, insurance and other expenses charged) */
            CET?: number;
            /**
             * @description Amortization system (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractAmortizationScheduled)
             * @enum {string}
             */
            amortizationScheduled?: 'SAC' | 'PRICE' | 'SAM' | 'WITHOUT_AMORTIZATION_SYSTEM' | 'OTHERS';
            /** @description Mandatory field to complement the information regarding the scheduled amortization when it has value 'OTHERS' */
            amortizationScheduledAdditionalInfo?: string;
            /** @description Consignor CNPJ */
            cnpjConsignee?: string;
            interestRates?: components['schemas']['LoanInterestRate'][];
            /** @description List that brings the information of the tariffs agreed in the contract. */
            contractedFees?: components['schemas']['LoanContractedFee'][];
            /** @description List that brings the charges agreed in the contract */
            contractedFinanceCharges?: components['schemas']['LoanContractedFinanceCharge'][];
            warranties?: components['schemas']['LoanWarranty'][];
            installments?: components['schemas']['LoanInstallments'];
            /** @description Loan contract payment data */
            payments?: components['schemas']['LoanPayments'];
        };
        /** @description Object that brings the set of information necessary to demonstrate the composition of the remunerative interest rates of the Credit Type */
        LoanInterestRate: {
            /**
             * @description Tax type
             * @enum {string}
             */
            taxType?: 'NOMINAL' | 'EFFECTIVE';
            /**
             * @description Interest rate type
             * @enum {string}
             */
            interestRateType?: 'SIMPLE' | 'COMPOUND';
            /**
             * @description Tax periodicity
             * @enum {string}
             */
            taxPeriodicity?: 'MONTHLY' | 'YEARLY';
            /** @description Calculation basis */
            calculation?: string;
            /** @description Types of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerType) */
            referentialRateIndexerType?: string;
            /** @description Subtypes of benchmark rates or indexers (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractReferentialRateIndexerSubType) */
            referentialRateIndexerSubType?: string;
            /** @description Free field to complement the information regarding the Type of reference rate or indexer */
            referentialRateIndexerAdditionalInfo?: string;
            /** @description Pre-fixed rate applied under the credit modality contract. 1 = 100% */
            preFixedRate?: number;
            /** @description Post-fixed rate applied under the credit modality contract. 1 = 100% */
            postFixedRate?: number;
            /** @description Text with additional information on the composition of agreed interest rates */
            additionalInfo?: string;
        };
        LoanContractedFee: {
            /** @description Agreed rate denomination */
            name?: string;
            /** @description Acronym identifying the agreed rate */
            code?: string;
            /**
             * @description Charge type for the rate agreed in the contract
             * @enum {string}
             */
            chargeType?: 'UNIQUE' | 'BY_INSTALLMENT';
            /**
             * @description Billing method related to the tariff agreed in the contract
             * @enum {string}
             */
            charge?: 'MINIMUM' | 'MAXIMUM' | 'FIXED' | 'PERCENTAGE';
            /** @description Monetary value of the tariff agreed in the contract */
            amount?: number;
            /** @description Rate value in percentage agreed in the contract */
            rate?: number;
        };
        LoanContractedFinanceCharge: {
            /** @description Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType) */
            type?: string;
            /** @description Field for additional information */
            additionalInfo?: string;
            /** @description Charge value in percentage agreed in the contract */
            rate?: number;
        };
        LoanWarranty: {
            /**
             * @description Code referencing the currency of the warranty
             * @example BRL
             */
            currencyCode?: string;
            /** @description Denomination / Identification of the type of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantyType) */
            type?: string;
            /** @description Denomination / Identification of the subtype of warranty that guarantees the Type of Credit Operation contracted (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumWarrantySubType) */
            subtype?: string;
            /** @description Warranty original value */
            amount?: number;
        };
        LoanInstallments: {
            /**
             * @description Type of total term of the contract referring to the type of credit informed
             * @enum {string}
             */
            typeNumberOfInstallments?: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR' | 'WITHOUT_TOTAL_PERIOD';
            /** @description Total term according to the type referring to the type of credit informed */
            totalNumberOfInstallments?: number;
            /**
             * @description Type of remaining term of the contract referring to the type of credit informed
             * @enum {string}
             */
            typeContractRemaining?: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR' | 'WITHOUT_TOTAL_PERIOD' | 'WITHOUT_REMAINING_PERIOD';
            /** @description Remaining term according to the type referring to the credit type informed */
            contractRemainingNumber?: number;
            /** @description Number of paid installments */
            paidInstallments?: number;
            /** @description Number of due installments */
            dueInstallments?: number;
            /** @description Number of overdue installments */
            pastDueInstallments?: number;
            /** @description List that brings the due dates and value of the non-regular installments of the contract of the type of credit consulted */
            balloonPayments?: components['schemas']['LoanInstallmentBalloonPayment'][];
        };
        LoanInstallmentBalloonPayment: {
            /**
             * Format: date-time
             * @description Expiration date of the non-regular installment to expire from the contract of the consulted credit modality
             */
            dueDate?: string;
            amount?: components['schemas']['LoanInstallmentBalloonPaymentAmount'];
        };
        /** @description Monetary value of the non-regular installment due */
        LoanInstallmentBalloonPaymentAmount: {
            /** @description Monetary value of the non-regular installment due */
            value?: number;
            /**
             * @description Code referencing the currency of the installment
             * @example BRL
             */
            currencyCode?: string;
        };
        LoanPayments: {
            /** @description Amount required for the customer to settle the debt */
            contractOutstandingBalance?: number;
            /** @description List of payments made in the period */
            releases?: components['schemas']['LoanPaymentRelease'][];
        };
        LoanPaymentRelease: {
            /** @description Identifies whether it is an agreed payment (false) or a one-time payment (true) */
            isOverParcelPayment?: boolean;
            /** @description Installment identifier, responsibility of each transmitting Institution */
            installmentId?: string;
            /**
             * Format: date-time
             * @description Effective date of payment referring to the contract of the credit modality consulted
             */
            paidDate?: string;
            /**
             * @description Code referencing the currency of the payment
             * @example BRL
             */
            currencyCode?: string;
            /** @description Payment amount referring to the contract of the credit modality consulted */
            paidAmount?: number;
            overParcel?: components['schemas']['LoanPaymentReleaseOverParcel'];
        };
        /** @description Object of fees and charges that were paid outside the installment */
        LoanPaymentReleaseOverParcel: {
            /** @description List of fees that were paid outside the installment, only for single payment */
            fees?: components['schemas']['LoanPaymentReleaseOverParcelFee'][];
            /** @description List of charges that were paid out of installment */
            charges?: components['schemas']['LoanPaymentReleaseOverParcelCharge'][];
        };
        LoanPaymentReleaseOverParcelFee: {
            /** @description Denomination of the agreed rate */
            name?: string;
            /** @description Acronym identifying the agreed rate */
            code?: string;
            /** @description Monetary value of the tariff agreed in the contract */
            amount?: number;
        };
        LoanPaymentReleaseOverParcelCharge: {
            /** @description Charge type agreed in the contract (https://openbanking-brasil.github.io/openapi/swagger-apis/loans/?urls.primaryName=2.0.1#model-EnumContractFinanceChargeType) */
            type?: string;
            /** @description Free field to fill in additional information regarding the charge */
            additionalInfo?: string;
            /** @description Payment amount of the charge paid outside the installment */
            amount?: number;
        };
        /**
         * @description Response with information related to a credit card bill
         * @example {}
         */
        Bill: {
            /** @description Primary identifier */
            id: string;
            /**
             * Format: date-time
             * @description Due date of the bill, displayed for payment by the customer
             */
            dueDate: string;
            /** @description Total bill amount */
            totalAmount: number;
            /**
             * @description Code referencing the currency of the bill
             * @example BRL
             */
            totalAmountCurrencyCode: string;
            /** @description Minimum payment amount of the bill */
            minimumPaymentAmount?: number;
            /** @description Indicates whether the bill allows installment payments (true) or not (false) */
            allowsInstallments?: boolean;
            /** @description List of charges associated to the bill */
            financeCharges: components['schemas']['BillFinanceCharge'][];
        };
        /**
         * @description Response with information related to a credit card bill finance charge
         * @example {}
         */
        BillFinanceCharge: {
            /** @description Primary identifier */
            id: string;
            /**
             * @description Denomination of the charges that apply to the postpaid payment account bill
             * @enum {string}
             */
            type: 'LATE_PAYMENT_REMUNERATIVE_INTEREST' | 'LATE_PAYMENT_FEE' | 'LATE_PAYMENT_INTEREST' | 'IOF' | 'OTHER';
            /** @description Amount charged for the charge/fee */
            amount: number;
            /**
             * @description Code referencing the currency of the charge
             * @example BRL
             */
            currencyCode: string;
            /** @description Free field, mandatory to fill if 'OTHER' type of charge is selected */
            additionalInfo?: string;
        };
        /**
         * @description Response with information related to a payment request
         * @example {}
         */
        PaymentRequest: {
            /** @description Primary identifier */
            id: string;
            /** @description Requested amount. For automatic pix it won't be returned */
            amount?: number;
            /** @description Fees charged for the payment request. This includes both Pluggy's fees and any customer-specific fees. Fees are calculated based on the payment method (PIX or Boleto) and the client's pricing configuration. For sandbox accounts, fees are set to 0. */
            fees?: number;
            /** @description Payment description */
            description?: string;
            /**
             * @description Payment request status
             * @enum {string}
             */
            status: 'CREATED' | 'IN_PROGRESS' | 'COMPLETED' | 'SCHEDULED' | 'WAITING_PAYER_AUTHORIZATION' | 'ERROR' | 'REFUND_IN_PROGRESS' | 'REFUNDED' | 'REFUND_ERROR' | 'CANCELED';
            /** @description Client payment identifier */
            clientPaymentId?: string;
            /**
             * Format: date-time
             * @description Date when the payment request was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the payment request was updated
             */
            updatedAt: string;
            callbackUrls?: components['schemas']['PaymentRequestCallbackUrls'];
            /**
             * Format: uuid
             * @description Payment receiver identifier
             */
            recipientId?: string;
            /** @description URL to begin the payment intent creation flow for this payment request */
            paymentUrl: string;
            /** @description Pix QR code generated by the payment receiver */
            pixQrCode?: string;
            boleto?: components['schemas']['Boleto'];
            automaticPix?: components['schemas']['PaymentIntentAutomaticPix'];
            schedule?: components['schemas']['SINGLE'] | components['schemas']['DAILY'] | components['schemas']['WEEKLY'] | components['schemas']['MONTHLY'] | components['schemas']['CUSTOM'];
            /** @description Error details when payment request fails */
            errorDetail?: {
                /** @description Error code */
                code?: string;
                /** @description Error message returned by the institution */
                providerMessage?: string;
            };
            /**
             * @description Indicates if this payment request is in sandbox mode. Default: false.
             * @default false
             */
            isSandbox: boolean;
        };
        /** @description Information of a schedule payment */
        SchedulePayment: {
            /** Format: uuid */
            id: string;
            /** @description Scheduled payment description */
            description: string;
            /**
             * @description Scheduled payment status
             * @enum {string}
             */
            status: 'SCHEDULED' | 'COMPLETED' | 'ERROR';
            /**
             * Format: date
             * @description Date when the payment is scheduled
             */
            scheduledDate: string;
            /** @description Identifier for the payment, used to link the scheduled payment with the corresponding payment received */
            endToEndId?: string;
            /** @description Details about an error that occurred with the scheduled payment */
            errorDetail?: {
                /** @description Error code */
                code?: string;
                /** @description Human-readable description of the error */
                description?: string;
                /** @description Additional details about the error in the provider's language */
                detail?: string;
            };
        };
        /**
         * @description Request with information to create a payment request
         * @example {
         *       "amount": 100.5,
         *       "description": "Transferência",
         *       "isSandbox": false
         *     }
         */
        CreatePaymentRequest: {
            /** @description Requested amount */
            amount: number;
            /** @description Payment description */
            description?: string;
            callbackUrls?: components['schemas']['PaymentRequestCallbackUrls'];
            /**
             * Format: uuid
             * @description Payment receiver identifier
             */
            recipientId?: string;
            /**
             * Format: uuid
             * @description Customer identifier associated to the payment
             */
            customerId?: string;
            /** @description Your payment identifier */
            clientPaymentId?: string;
            /** @default null */
            schedule: (components['schemas']['SINGLE'] | components['schemas']['DAILY'] | components['schemas']['WEEKLY'] | components['schemas']['MONTHLY'] | components['schemas']['CUSTOM']) | null;
            /**
             * @description Indicates if this payment request should be created in sandbox mode. Default: false.
             * @default false
             */
            isSandbox: boolean;
        };
        /**
         * @description Request with information to create a PIX QR payment request
         * @example {
         *       "pixQrCode": "00020126490014br.gov.bcb.pix0108dict-key0215additional-info52040000530398654031005802BR5912example-name6006Cidade62090505tx-id63045E20",
         *       "callbackUrls": null,
         *       "customerId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "isSandbox": false
         *     }
         */
        CreatePixQrPaymentRequest: {
            /** @description Pix QR code */
            pixQrCode: string;
            callbackUrls?: components['schemas']['PaymentRequestCallbackUrls'];
            /**
             * Format: uuid
             * @description Customer identifier associated to the payment
             */
            customerId?: string;
            /**
             * @description Indicates if this payment request should be created in sandbox mode. Default: false.
             * @default false
             */
            isSandbox: boolean;
        };
        /**
         * @description Request with information to update a payment request
         * @example {
         *       "amount": 100.5,
         *       "description": "Transferência",
         *       "callbackUrls": null,
         *       "recipientId": "05c693bf-c196-47ea-a28c-8251d6bb8a06",
         *       "customerId": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "clientPaymentId": "external-ref-456",
         *       "isSandbox": false
         *     }
         */
        UpdatePaymentRequest: {
            /** @description Requested amount */
            amount?: number;
            /** @description Payment description */
            description?: string;
            callbackUrls?: components['schemas']['PaymentRequestCallbackUrls'];
            /**
             * Format: uuid
             * @description Payment receiver identifier
             */
            recipientId?: string;
            /**
             * Format: uuid
             * @description Customer identifier associated to the payment
             */
            customerId?: string;
            /** @description Your payment identifier */
            clientPaymentId?: string;
            /**
             * @description Indicates if this payment request should be updated as sandbox. Default: false.
             * @default false
             */
            isSandbox: boolean;
        };
        /**
         * @description Redirect urls after the payment was completed or ended in error status
         * @example {}
         */
        PaymentRequestCallbackUrls: {
            /** @description Url to be redirected after the payment was completed */
            success?: string;
            /** @description Url to be redirected when the payment is pending (for example, when it has status WAITING_PAYER_AUTHORIZATION */
            pending?: string;
            /** @description Url to be redirected after the payment ended in error status */
            error?: string;
        };
        /**
         * @description Response with information related to a payment institution
         * @example {
         *       "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "name": "Banco J. Safra S.A.",
         *       "ispb": "03017677",
         *       "tradeName": "Banco Safra",
         *       "compe": "074",
         *       "createdAt": "2020-04-21T15:00:00.000Z",
         *       "updatedAt": "2020-04-21T15:00:00.000Z"
         *     }
         */
        PaymentInstitution: {
            /** @description Primary identifier */
            id: string;
            /** @description Payment institution name */
            name: string;
            /** @description Payment institution trade name */
            tradeName: string;
            /** @description Payment institution ISPB */
            ispb: string;
            /** @description Payment institution COMPE */
            compe?: string;
            /**
             * Format: date-time
             * @description Date when the payment institution was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the payment institution was updated
             */
            updatedAt: string;
        };
        /**
         * @description Payment receiver bank account information
         * @example {}
         */
        PaymentRecipientAccount: {
            /** @description Receiver bank account branch (agency) */
            branch: string;
            /** @description Receiver bank account number */
            number: string;
            /** @description Receiver bank account type, could be: 'CHECKING_ACCOUNT', 'SAVINGS_ACCOUNT' or 'GUARANTEED_ACCOUNT' */
            type: string;
        };
        /**
         * @description Request with information related to a payment intent
         * @example {
         *       "id": "4cfe1f6d-ae71-4c35-aae0-8f8a535ffbbd",
         *       "status": "CONSENT_AWAITING_AUTHORIZATION",
         *       "createdAt": "2023-11-06T15:38:47.861Z",
         *       "updatedAt": "2023-11-06T15:45:19.384Z",
         *       "paymentRequest": {
         *         "id": "c2a6b7d9-3349-435d-8341-44021449ebbc",
         *         "amount": 100.5,
         *         "description": "Transferência",
         *         "status": "IN_PROGRESS",
         *         "createdAt": "2023-11-06T13:03:45.689Z",
         *         "updatedAt": "2023-11-06T15:45:19.401Z",
         *         "callbackUrls": null,
         *         "recipient": null,
         *         "paymentUrl": "https://pay.pluggy.ai/05c693bf-c196-47ea-a28c-8251d6bb8a06"
         *       },
         *       "connector": {
         *         "id": 603,
         *         "name": "Bradesco",
         *         "primaryColor": "e5173f",
         *         "institutionUrl": "https://banco.bradesco/open-finance/logo/icones_vetorial-pf.svg",
         *         "country": "BR",
         *         "type": "PERSONAL_BANK",
         *         "credentials": [
         *           {
         *             "validation": "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
         *             "validationMessage": "CPF deve ter 11 números.",
         *             "label": "CPF",
         *             "name": "cpf",
         *             "type": "number",
         *             "placeholder": "",
         *             "optional": false
         *           }
         *         ],
         *         "imageUrl": "https://cdn.pluggy.ai/assets/connector-icons/203.svg",
         *         "hasMFA": false,
         *         "oauth": true,
         *         "health": {
         *           "status": "ONLINE",
         *           "stage": null
         *         },
         *         "products": [
         *           "ACCOUNTS",
         *           "TRANSACTIONS",
         *           "IDENTITY",
         *           "CREDIT_CARDS",
         *           "PAYMENT_DATA",
         *           "LOANS",
         *           "INVESTMENTS"
         *         ],
         *         "createdAt": "2023-07-12T20:20:17.253Z",
         *         "isSandbox": false,
         *         "isOpenFinance": true
         *       },
         *       "consentUrl": "https://consenturl.com"
         *     }
         */
        PaymentIntent: {
            /** @description Primary identifier */
            id?: string;
            /**
             * @description Payment intent status
             * @enum {string}
             */
            status?: 'PAYMENT_REJECTED' | 'ERROR' | 'CANCELED' | 'CONSENT_REJECTED' | 'STARTED' | 'ENQUEUED' | 'CONSENT_AWAITING_AUTHORIZATION' | 'CONSENT_AUTHORIZED' | 'PAYMENT_PENDING' | 'PAYMENT_PARTIALLY_ACCEPTED' | 'PAYMENT_SETTLEMENT_PROCESSING' | 'PAYMENT_SETTLEMENT_DEBTOR_ACCOUNT' | 'PAYMENT_COMPLETED' | 'POSSIBLE_FRAUD' | 'TOP_UP_CNPJ_MISMATCH' | 'REVOKED';
            /**
             * Format: date-time
             * @description Date when the payment intent was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date when the payment intent was updated
             */
            updatedAt?: string;
            /** @description Payment request associated to the payment intent */
            paymentRequest?: components['schemas']['PaymentRequest'];
            /** @description Connector associated to the payment intent */
            connector?: components['schemas']['Connector'];
            /** @description Url to authorize the payment intent */
            consentUrl?: string;
            /** @description Pix id related to the payment intent */
            referenceId?: string;
            /**
             * @description Payment method can be PIS (Payment Initiation) or PIX
             * @default PIS
             * @enum {string}
             */
            paymentMethod: 'PIS' | 'PIX';
            /** @description Pix data related to the payment intent (only applies for PIX payment method) */
            pixData?: components['schemas']['PixData'];
            /** @description Error details when payment intent fails */
            errorDetail?: {
                /** @description Error code */
                code?: string;
                /** @description Provider error code */
                providerCode?: string;
                /** @description Provider error title */
                providerTitle?: string;
                /** @description Provider detailed error description */
                providerDetail?: string;
            };
        };
        /**
         * @description Request with information to create a payment intent
         * @example {}
         */
        CreatePaymentIntent: {
            /** @description Primary identifier of the payment request associated to the payment intent */
            paymentRequestId?: string;
            parameters?: components['schemas']['PaymentIntentParameter'];
            /** @description Primary identifier of the connector associated to the payment intent */
            connectorId?: number;
            /**
             * @description Payment method can be PIS (Payment Initiation) or PIX (PIX QR flow).
             * @enum {string}
             */
            paymentMethod?: 'PIS';
            /** @description Only for PIX paymentMethod. If true, the generated PIX QR code is dynamic and one-use. This requires the customerId to be present, and the customer must have CPF/CNPJ */
            isDynamicPix?: boolean;
        };
        /**
         * @description Response with information related to a payment customer
         * @example {
         *       "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "type": "INDIVIDUAL",
         *       "name": "Marco Silva",
         *       "email": "msilva@pluggy.ai",
         *       "cpf": "123456789-00"
         *     }
         */
        PaymentCustomer: {
            /** @description Primary identifier */
            id: string;
            /**
             * @description Customer type
             * @enum {string}
             */
            type: 'INDIVIDUAL' | 'BUSINESS';
            /** @description Customer name */
            name: string;
            /** @description Customer email */
            email?: string;
            /** @description Customer CPF */
            cpf?: string;
            /** @description Customer CNPJ, if type is `BUSINESS` */
            cnpj?: string;
        };
        /**
         * @description Response with information related to a payment customer
         * @example {
         *       "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "type": "INDIVIDUAL",
         *       "name": "Marco Silva",
         *       "email": "msilva@pluggy.ai",
         *       "cpf": "123456789-00"
         *     }
         */
        CreatePaymentCustomerRequestBody: {
            /**
             * @description Customer type
             * @enum {string}
             */
            type: 'INDIVIDUAL' | 'BUSINESS';
            /** @description Customer name */
            name: string;
            /** @description Customer email */
            email?: string;
            /** @description Customer CPF */
            cpf?: string;
            /** @description Customer CNPJ, if type is `BUSINESS` */
            cnpj?: string;
        };
        /**
         * @description Response with information related to a payment customer
         * @example {
         *       "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "type": "INDIVIDUAL",
         *       "name": "Marco Silva",
         *       "email": "msilva@pluggy.ai",
         *       "cpf": "123456789-00"
         *     }
         */
        CreateOrUpdatePaymentCustomer: {
            /** @description Primary identifier */
            id: string;
            /**
             * @description Customer type
             * @enum {string}
             */
            type: 'INDIVIDUAL' | 'BUSINESS';
            /** @description Customer name */
            name: string;
            /** @description Customer email */
            email?: string;
            /** @description Customer CPF */
            cpf?: string;
            /** @description Customer CNPJ, if type is `BUSINESS` */
            cnpj?: string;
        };
        /**
         * @description Response with information related to a payment recipient
         * @example {
         *       "id": "5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f",
         *       "name": "Conta empresa",
         *       "taxNumber": "123456789-00",
         *       "paymentInstitution": {
         *         "id": "00000000-0000-0000-0000-000000000000",
         *         "name": "Banco J. Safra S.A.",
         *         "ispb": "03017677",
         *         "tradeName": "Banco Safra",
         *         "compe": "074",
         *         "createdAt": "2020-04-21T15:00:00.000Z",
         *         "updatedAt": "2020-04-21T15:00:00.000Z"
         *       },
         *       "account": {
         *         "branch": "0001",
         *         "number": "123456",
         *         "type": "CHECKING_ACCOUNT"
         *       },
         *       "isDefault": false,
         *       "pixKey": null
         *     }
         */
        PaymentRecipient: {
            /** @description Primary identifier */
            id: string;
            /** @description Account owner tax number. Can be CPF or CNPJ (only numbers). */
            taxNumber: string;
            /** @description Account owner name. */
            name: string;
            /** @description Recipient's bank account destination. */
            paymentInstitution: components['schemas']['PaymentInstitution'];
            /** @description Indicates if the recipient is the default one */
            isDefault: boolean;
            account: components['schemas']['PaymentRecipientAccount'];
            /** @description Pix key associated with the payment recipient */
            pixKey?: string;
        };
        /**
         * @description Request with information to create a payment recipient.
         * @example {
         *       "taxNumber": "123456789-00",
         *       "name": "Conta empresa",
         *       "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
         *       "account": {
         *         "branch": "0001",
         *         "number": "123456",
         *         "type": "CHECKING_ACCOUNT"
         *       }
         *     }
         */
        CreatePaymentRecipient: {
            /** @description Account owner tax number. Can be CPF or CNPJ (only numbers) */
            taxNumber: string;
            /** @description Account owner name. */
            name: string;
            /**
             * Format: uuid
             * @description Primary identifier of the institution associated to the payment recipient.
             */
            paymentInstitutionId: string;
            /** @description Recipient's bank account destination. */
            account: components['schemas']['PaymentRecipientAccount'];
        };
        /**
         * @description Request with information to update a payment recipient
         * @example {
         *       "taxNumber": "123456789-00",
         *       "name": "Conta empresa",
         *       "paymentInstitutionId": "00000000-0000-0000-0000-000000000000",
         *       "account": {
         *         "branch": "0001",
         *         "number": "123456",
         *         "type": "CHECKING_ACCOUNT"
         *       }
         *     }
         */
        UpdatePaymentRecipient: {
            /** @description Account owner tax number. Can be CPF or CNPJ (only numbers) */
            taxNumber?: string;
            /** @description Account owner name. */
            name?: string;
            /**
             * Format: uuid
             * @description Primary identifier of the institution associated to the payment recipient.
             */
            paymentInstitutionId?: string;
            /** @description Recipient's bank account destination. */
            account?: components['schemas']['PaymentRecipientAccount'];
        };
        /** @description Payment Intent PIX data */
        PixData: {
            /** @description PIX QR raw value */
            value: string;
            /** @description PIX QR image in base64 format */
            qr: string;
        };
        /** @description Boleto data */
        Boleto: {
            /** @description Boleto digitable line */
            digitableLine: string;
            /** @description Boleto barcode */
            barcode: string;
            payer: components['schemas']['BoletoPayer'];
            recipient: components['schemas']['BoletoRecipient'];
            /**
             * Format: date-time
             * @description Boleto issue date
             */
            date?: string;
            /**
             * Format: date-time
             * @description Boleto due date
             */
            dueDate: string;
            /**
             * Format: date-time
             * @description After this date, the boleto cannot be paid
             */
            expirationDate?: string;
            /** @description Boleto original amount, without interests, penalties and discounts */
            baseAmount: number;
            /** @description Boleto penalty amount. If there is no penalty, it will be returned as zero */
            penaltyAmount: number;
            /** @description Boleto interest amount. If there is no interest, it will be returned as zero */
            interestAmount?: number;
            /** @description Boleto discount amount. If there is no discounts, it will be returned as zero */
            discountAmount: number;
            /** @description Boleto final amount. It is equal to the base amount plus penalties and interests, minus discounts */
            totalAmount: number;
            /**
             * Format: date-time
             * @description Date when the lastest information of this boleto has been retrieved
             */
            updatedAt?: string;
        };
        /** @description Boleto payer information */
        BoletoPayer: {
            /** @description Payer CPF or CNPJ */
            taxNumber: string;
            /** @description Payer name */
            name: string;
        };
        /** @description Boleto recipient information */
        BoletoRecipient: {
            /** @description Recipient CPF or CNPJ */
            taxNumber: string;
            /** @description Recipient name */
            name: string;
        };
        /**
         * One time option
         * @description Schedule atribute to generate one payment in the future
         */
        SINGLE: {
            /**
             * @description Scheduled type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: 'SINGLE';
            /**
             * Format: date
             * @example 2024-06-11
             */
            date: string;
        };
        /**
         * Daily option
         * @description Schedule atribute to generate daily payments
         */
        DAILY: {
            /**
             * @description Scheduled type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: 'DAILY';
            /**
             * Format: date
             * @description The start date of the validity of the scheduled payment authorization.
             * @example 2024-06-11
             */
            startDate: string;
            /**
             * Format: integer
             * @description Under the specified schedule frequency, how many payments will be scheduled to occur.
             * @example 3
             */
            occurrences?: number;
        };
        /**
         * Weekly option
         * @description Schedule atribute to generate weekly payments
         */
        WEEKLY: {
            /**
             * @description Scheduled type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: 'WEEKLY';
            /**
             * Format: date
             * @description The start date of the validity of the scheduled payment authorization.
             * @example 2024-06-11
             */
            startDate: string;
            /**
             * @description Day of the week on which each payment will occur. For instance, if set to 'MONDAY', the first payment will occur on the first monday after the startDate (or the same day, if it is already monday), and every monday after that.
             * @example MONDAY
             * @enum {string}
             */
            dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURDSAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY';
            /**
             * Format: integer
             * @description Under the specified schedule frequency, how many payments will be scheduled to occur.
             * @example 3
             */
            occurrences?: number;
        };
        /**
         * Monthly option
         * @description Schedule atribute to generate monthly payments
         */
        MONTHLY: {
            /**
             * @description Scheduled type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: 'MONTHLY';
            /**
             * Format: date
             * @example 2024-06-11
             */
            startDate: string;
            /**
             * @description Day of the month on which each payment will occur. For example, if '10', the first payment will occur on the next 10th day of the month after the start date, or the same day if it is already 10th, and every 10th day after that.
             * @example 3
             */
            dayOfMonth: number;
            /**
             * Format: integer
             * @description Under the specified schedule frequency, how many payments will be scheduled to occur.
             * @example 3
             */
            occurrences?: number;
        };
        /**
         * Customized option
         * @description Schedule atribute to generate custom payments in the future
         */
        CUSTOM: {
            /**
             * @description Scheduled type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: 'CUSTOM';
            dates: string[];
            /** @description Additional information about the custom schedule */
            additionalInformation?: string;
        };
        PageResponseConsents: {
            results: components['schemas']['Consent'][];
            /** Format: double */
            page: number;
            /** Format: double */
            total: number;
            /** Format: double */
            totalPages: number;
        };
        /** @description Item consent information */
        Consent: {
            /** @description Consent primary identifier */
            id: string;
            /** @description Primary identifier of the item associated to the consent */
            itemId: string;
            /** @description Products to be collected in the connection */
            products: ('ACCOUNTS' | 'CREDIT_CARDS' | 'TRANSACTIONS' | 'PAYMENT_DATA' | 'INVESTMENTS' | 'INVESTMENTS_TRANSACTIONS' | 'IDENTITY' | 'BROKERAGE_NOTE' | 'MOVE_SECURITY' | 'LOANS')[];
            /** @description Products consented by the user to be collected */
            openFinancePermissionsGranted?: ('REGISTRATION_ALL' | 'REGISTRATION_IDENTIFICATIONS' | 'REGISTRATION_QUALIFICATIONS' | 'REGISTRATION_FINANCIAL_RELATIONS' | 'ACCOUNTS_ALL' | 'ACCOUNTS_LIST' | 'ACCOUNTS_BALANCES' | 'ACCOUNTS_LIMITS' | 'ACCOUNTS_TRANSACTIONS' | 'CREDIT_CARDS_ALL' | 'CREDIT_CARDS_LIST' | 'CREDIT_CARDS_LIMITS' | 'CREDIT_CARDS_TRANSACTIONS' | 'CREDIT_CARDS_BILLS' | 'CREDIT_OPERATIONS_ALL' | 'INVESTMENTS_ALL' | 'EXCHANGES_ALL')[];
            /**
             * Format: date-time
             * @description Date when the consent was given
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the consent expires. Null if the consent doesn't expire
             */
            expiresAt?: string;
            /**
             * Format: date-time
             * @description Date when the consent was revoked
             */
            revokedAt?: string;
        };
        /** @description Smart transfer preauthorization */
        SmartTransferPreauthorization: {
            /** @description Preauthorization primary identifier */
            id: string;
            /**
             * @description Preauthorization status
             * @example COMPLETED
             * @enum {string}
             */
            status: 'CREATED' | 'COMPLETED' | 'REVOKED' | 'REJECTED' | 'ERROR';
            /** @description Url to give the consent in the institution */
            consentUrl?: string;
            /** @description Client preauthorization identifier */
            clientPreauthorizationId?: string;
            callbackUrls?: components['schemas']['SmartTransferCallbackUrls'];
            recipients: components['schemas']['PaymentRecipient'][];
            connector: components['schemas']['Connector'];
            /**
             * Format: date-time
             * @description Date when the preauthorization was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the preauthorization was updated
             */
            updatedAt: string;
        };
        /**
         * @description Redirect urls after the preauthorization flow was completed or ended in error status
         * @example {}
         */
        SmartTransferCallbackUrls: {
            /** @description Url to be redirected after the preauthorization was completed */
            success?: string;
            /** @description Url to be redirected after the preauthorization ended in error status */
            error?: string;
        };
        /** @description Create smart transfer preauthorization request data */
        CreateSmartTransferPreauthorization: {
            /** @description Primary identifier of the connector */
            connectorId: number;
            parameters: components['schemas']['SmartTransferPreauthorizationParameter'];
            recipientIds: string[];
            callbackUrls?: components['schemas']['SmartTransferCallbackUrls'];
            /** @description Client preauthorization identifier */
            clientPreauthorizationId?: string;
        };
        /**
         * @description Credentials neccesary to create a smart transfer preauthorization
         * @example {
         *       "cpf": "416.799.495-00",
         *       "cnpj": "41.679.495/0001-00"
         *     }
         */
        SmartTransferPreauthorizationParameter: {
            /** @description CPF of the payer */
            cpf: string;
            /** @description CNPJ of the payer */
            cnpj?: string;
        };
        /** @description Smart transfer payment */
        SmartTransferPayment: {
            /** @description Payment primary identifier */
            id: string;
            /** @description Payment primary identifier */
            preauthorizationId: string;
            /**
             * @description Payment status
             * @enum {string}
             */
            status: 'PAYMENT_REJECTED' | 'ERROR' | 'CANCELED' | 'CONSENT_REJECTED' | 'CONSENT_AUTHORIZED' | 'PAYMENT_PENDING' | 'PAYMENT_PARTIALLY_ACCEPTED' | 'PAYMENT_SETTLEMENT_PROCESSING' | 'PAYMENT_SETTLEMENT_DEBTOR_ACCOUNT' | 'PAYMENT_COMPLETED';
            /** @description Payment amount */
            amount: number;
            /** @description Payment description */
            description?: string;
            recipient: components['schemas']['PaymentRecipient'];
            /** @description Client payment identifier */
            clientPaymentId?: string;
            /**
             * Format: date-time
             * @description Date when the payemnt was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the payment was updated
             */
            updatedAt: string;
        };
        /** @description Create smart transfer payment request data */
        CreateSmartTransferPayment: {
            /** @description Primary identifier of the preauthorization */
            preauthorizationId: string;
            /** @description Primary identifier of the paymen recipient */
            recipientId: string;
            /** @description Payment amount */
            amount: number;
            /** @description Payment description */
            description?: string;
            /** @description Client payment identifier */
            clientPaymentId?: string;
        };
        /** @description Information of the boleto associated with the payment */
        PaymentDataBoletoMetadata: {
            /** @description Boleto identifier */
            digitableLine?: string;
            /** @description Boleto barcode number */
            barcode?: string;
            /** @description Boleto original amount without considering penalties / interests / discounts */
            baseAmount?: number;
            /** @description Boleto interest amount */
            interestAmount?: number;
            /** @description Boleto penalty amount */
            penaltyAmount?: number;
            /** @description Boleto discount amount */
            discountAmount?: number;
        };
        /**
         * @description Request with information to create a boleto connection
         * @example {
         *       "connectorId": 225,
         *       "credentials": {
         *         "clientId": "your-client-id",
         *         "clientSecret": "your-client-secret",
         *         "certificate": "your-certificate-no-newlines",
         *         "privateKey": "your-private-key-no-newlines"
         *       }
         *     }
         */
        CreateBoletoConnection: {
            /** @description Connector identifier. Check out the list of connectors, and if it has the flag 'supportsBoletoManagement' as true, it means it's possible to create a boleto connection with it. */
            connectorId: number;
            /** @description Credentials required for the connection. For Inter, they are clientId, clientSecret, certificate and privateKey, follow: https://docs.pluggy.ai/docs/connect-an-account#inter-pj */
            credentials: {
                [key: string]: string;
            };
        };
        /**
         * @description Request with information to create a boleto connection from an Item
         * @example {
         *       "itemId": "0303c07b-fef0-4903-af9a-007fa086ca8c"
         *     }
         */
        CreateBoletoConnectionFromItem: {
            /**
             * Format: uuid
             * @description Item ID
             */
            itemId: string;
        };
        /**
         * @description Response with information related to a boleto connection
         * @example {
         *       "id": "dc3537ad-13b4-4770-b248-e4578983899c",
         *       "connectorId": 225,
         *       "createdAt": "2023-01-01T00:00:00.000Z",
         *       "updatedAt": "2023-01-01T00:00:00.000Z"
         *     }
         */
        BoletoConnection: {
            /**
             * Format: uuid
             * @description Primary identifier
             */
            id: string;
            /** @description Primary identifier of the connector associated with this connection */
            connectorId: number;
            /**
             * Format: date-time
             * @description Date when the connection was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Date when the connection was last updated
             */
            updatedAt: string;
        };
        /** @description Request with information to create a boleto */
        CreateBoleto: {
            /**
             * Format: uuid
             * @description Primary identifier of the boleto connection
             */
            boletoConnectionId: string;
            boleto: {
                /** @description Your identifier for this boleto */
                seuNumero: string;
                /** @description Boleto amount */
                amount: number;
                /**
                 * Format: date-time
                 * @description Due date for the boleto. Must be today or in the future.
                 */
                dueDate: string;
                payer: {
                    /**
                     * @description Payer tax number (CPF/CNPJ)
                     * @example 41.679.495/0001-00
                     */
                    taxNumber: string;
                    /**
                     * @description Payer name
                     * @example NOME LEGAL EMPRESA
                     */
                    name: string;
                    /** @description Payer street address */
                    addressStreet?: string;
                    /** @description Payer city */
                    addressCity?: string;
                    /** @description Payer state */
                    addressState: string;
                    /** @description Payer ZIP code */
                    addressZipCode: string;
                };
                /** @description Fine information for late payment */
                fine?: {
                    /** @description Fine value */
                    value: number;
                    /**
                     * @description Type of fine calculation
                     * @enum {string}
                     */
                    type: 'PERCENTAGE' | 'FIXED';
                };
                /** @description Interest information for late payment */
                interest?: {
                    /** @description Interest value */
                    value: number;
                    /**
                     * @description Type of interest calculation
                     * @enum {string}
                     */
                    type: 'PERCENTAGE';
                };
            };
        };
        /** @description Response with information related to an issued boleto */
        IssuedBoleto: {
            /** @description Primary identifier */
            id: string;
            /** @description Boleto amount */
            amount: number;
            /**
             * @description Current status of the boleto
             * @enum {string}
             */
            status: 'OPEN' | 'PAID' | 'OVERDUE' | 'CANCELLED';
            /** @description Your identifier for this boleto */
            seuNumero: string;
            /**
             * Format: date-time
             * @description Due date of the boleto
             */
            dueDate: string;
            payer: {
                /** @description Payer tax number (CPF/CNPJ) */
                taxNumber: string;
                /** @description Type of person (individual or business) */
                personType?: string;
                /** @description Payer name */
                name: string;
                /** @description Payer street address */
                addressStreet?: string;
                /** @description Payer address number */
                addressNumber?: string;
                /** @description Additional address information */
                addressComplement?: string;
                /** @description Payer neighborhood */
                addressNeighborhood?: string;
                /** @description Payer city */
                addressCity?: string;
                /** @description Payer state */
                addressState: string;
                /** @description Payer ZIP code */
                addressZipCode: string;
                /** @description Payer email */
                email?: string;
                /** @description Payer area code */
                ddd?: string;
                /** @description Payer phone number */
                phoneNumber?: string;
                /** @description Amount paid or null if it hasn't been paid yet */
                amountPaid?: number;
                /**
                 * @description Payment origin for the boleto
                 * @enum {string}
                 */
                paymentOrigin?: 'PIX' | 'BOLETO';
            };
            /** @description PIX QR code for payment */
            pixQr?: string;
            /** @description Boleto digitable line */
            digitableLine: string;
            /** @description Bank's internal identifier for the boleto */
            nossoNumero?: string;
            /** @description Boleto barcode */
            barcode: string;
            /**
             * Format: uuid
             * @description ID of the boleto connection used to create this boleto
             */
            boletoConnectionId: string;
            /**
             * Format: date-time
             * @description Date when the boleto was created
             */
            createdAt: string;
            /** @description Amount that was paid for this boleto */
            amountPaid?: number | null;
            /**
             * @description Origin of the payment when the boleto is paid
             * @enum {string|null}
             */
            paymentOrigin?: 'PIX' | 'BOLETO' | null;
            /** @description Fine information for late payment */
            fine?: {
                /** @description Fine value */
                value?: number;
                /**
                 * @description Type of fine calculation
                 * @enum {string}
                 */
                type?: 'PERCENTAGE' | 'FIXED';
            } | null;
            /** @description Interest information for late payment */
            interest?: {
                /** @description Interest value */
                value?: number;
                /**
                 * @description Type of interest calculation
                 * @enum {string}
                 */
                type?: 'PERCENTAGE';
            };
            /**
             * Format: date-time
             * @description Date when the boleto was paid
             */
            paidAt?: string;
        };
        /** @description Automatic PIX data */
        CreateAutomaticPixPaymentRequest: {
            /** @description Fixed charge amount; if filled in, it represents consent for payments of fixed amounts, not subject to change during the validity of the consent. If it's sent, minimumVariableAmount and maximumVariableAmount cannot be provided. */
            fixedAmount?: number;
            /** @description Minimum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided. */
            minimumVariableAmount?: number;
            /** @description Maximum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided. */
            maximumVariableAmount?: number;
            /** @description Description for the automatic pix authorization */
            description?: string;
            /**
             * Format: date-time
             * @description Represents the expected date for the first occurrence of a payment associated with the recurrence. Date format must be YYYY-MM-DD (for example: 2025-06-16)
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Expiration date for the automatic pix authorization. The date must be in UTC and the format must follow the following pattern: YYYY-MM-DDTHH:MM:SSZ (for example: 2025-06-16T03:00:00Z).
             */
            expiresAt?: string;
            /** @description Indicates whether the receiving customer is allowed to make payment attempts, according to the rules established in the Pix arrangement. */
            isRetryAccepted?: boolean;
            firstPayment?: components['schemas']['AutomaticPixFirstPayment'];
            /**
             * @description Defines the permitted frequency for carrying out transactions.
             * @enum {string}
             */
            interval: 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'SEMESTER' | 'YEARLY';
            callbackUrls?: components['schemas']['PaymentRequestCallbackUrls'];
            /** @description Primary identifier of the payment recipient */
            recipientId: string;
            /** @description Client payment identifier */
            clientPaymentId?: string;
            /** @description Primary identifier of the customer */
            customerId?: string;
        };
        /** @description Definitions for the first payment. It is considered as the user's enrollment payment for the service. */
        AutomaticPixFirstPayment: {
            /**
             * Format: date-time
             * @description Defines the target settlement date of the first payment. If not provided, it will be settled immediately. Date format must be YYYY-MM-DD (for example: 2025-06-16)
             */
            date?: string;
            /** @description Description for the first payment. If not provided, the description will be the same as the description of the payment request */
            description?: string;
            /** @description Amount for the first payment. */
            amount: number;
        };
        /** @description Automatic PIX data */
        PaymentIntentAutomaticPix: {
            /** @description Fixed charge amount; if filled in, it represents consent for payments of fixed amounts, not subject to change during the validity of the consent. If it's sent, minimumVariableAmount and maximumVariableAmount cannot be provided. */
            fixedAmount?: number;
            /** @description Minimum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided. */
            minimumVariableAmount?: number;
            /** @description Maximum amount allowed per charge; if filled in, it represents consent for payments of variable amounts. If it's sent, fixedAmount cannot be provided. */
            maximumVariableAmount?: number;
            /**
             * Format: date-time
             * @description Represents the expected date for the first occurrence of a payment associated with the recurrence.
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Expiration date for the automatic pix authorization
             */
            expiresAt?: string;
            /** @description Indicates whether the receiving customer is allowed to make payment attempts, according to the rules established in the Pix arrangement. */
            isRetryAccepted?: boolean;
            firstPayment?: components['schemas']['AutomaticPixFirstPayment'];
            /**
             * @description Defines the permitted frequency for carrying out transactions.
             * @enum {string}
             */
            interval: 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'SEMESTER' | 'YEARLY';
        };
        /** @description Automatic PIX payment */
        AutomaticPixPayment: {
            /** @description Payment primary identifier */
            id: string;
            /**
             * @description Payment status
             * @enum {string}
             */
            status: 'SCHEDULED' | 'CREATED' | 'COMPLETED' | 'CANCELED' | 'ERROR';
            /** @description Payment amount */
            amount: number;
            /** @description Payment description */
            description?: string;
            /**
             * Format: date
             * @description Payment scheduled date
             */
            date: string;
            /** @description Payment end to end identifier */
            endToEndId?: string;
            errorDetail?: components['schemas']['AutomaticPixPaymentErrorDetail'];
            /** @description External identifier for the payment */
            clientPaymentId?: string;
        };
        /** @description Details about an error that occurred with the automatic PIX payment */
        AutomaticPixPaymentErrorDetail: {
            /**
             * @description Error codes expected during payment processing:
             *     - SALDO_INSUFICIENTE: The selected account does not have sufficient balance to make the payment.
             *     - VALOR_ACIMA_LIMITE: Validates if the amount exceeds the limit established [by the institution (account or channel)/in the arrangement] to allow the client to perform transactions.
             *     - VALOR_INVALIDO: The submitted amount is not valid.
             *     - NAO_INFORMADO: Not reported/identified by the account-holding institution.
             *     - PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Payment data differs from consent data.
             *     - PAGAMENTO_RECUSADO_DETENTORA: [description of the reason for refusal].
             *     - PAGAMENTO_RECUSADO_SPI: [error code according to PACS.002 reason domain table].
             *     - CONSENTIMENTO_INVALIDO: Invalid consent (in final status).
             *     - FALHA_INFRAESTRUTURA_SPI: Indicates a failure in the Instant Payments System (SPI).
             *     - FALHA_INFRAESTRUTURA_ICP: Indicates a failure in the Public Key Infrastructure (ICP).
             *     - FALHA_INFRAESTRUTURA_PSP_RECEBEDOR: Indicates a failure in the infrastructure of the Payment Service Provider (PSP) that receives the payment.
             *     - FALHA_INFRAESTRUTURA_DETENTORA: Indicates a failure in the infrastructure of the institution holding the information or resources.
             *     - TITULARIDADE_INCONSISTENTE: Account currently not associated with the CPF/CNPJ of the long-term consent.
             *     - LIMITE_PERIODO_VALOR_EXCEDIDO: The transaction cannot be performed because the amount parameterized in the consent has been exceeded.
             *     - LIMITE_PERIODO_QUANTIDADE_EXCEDIDO: The transaction cannot be performed because the quantity parameterized in the consent has been exceeded.
             *     - LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the global consent limit.
             *     - LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO: The transaction amount exceeds the per-transaction limit set in the consent.
             *     - LIMITE_TENTATIVAS_EXCEDIDO: The maximum number of settlement attempts allowed by the arrangement has been reached.
             *     - CONSENTIMENTO_REVOGADO: The payment was associated with a consent that has been revoked.
             *     - FORA_PRAZO_PERMITIDO: The request time or period does not allow scheduling by the holder.
             *     - DETALHE_TENTATIVA_INVALIDO: The parameter(s) [field_name(s)] entered for the new payment attempt do not match the original failed payment and are not allowed in the new attempt.
             *     - DETALHE_PAGAMENTO_INVALIDO: Validates if a given parameter provided complies with the business rules.
             * @enum {string}
             */
            code: 'SALDO_INSUFICIENTE' | 'VALOR_ACIMA_LIMITE' | 'VALOR_INVALIDO' | 'NAO_INFORMADO' | 'PAGAMENTO_DIVERGENTE_CONSENTIMENTO' | 'PAGAMENTO_RECUSADO_DETENTORA' | 'PAGAMENTO_RECUSADO_SPI' | 'CONSENTIMENTO_INVALIDO' | 'FALHA_INFRAESTRUTURA_SPI' | 'FALHA_INFRAESTRUTURA_ICP' | 'FALHA_INFRAESTRUTURA_PSP_RECEBEDOR' | 'FALHA_INFRAESTRUTURA_DETENTORA' | 'TITULARIDADE_INCONSISTENTE' | 'LIMITE_PERIODO_VALOR_EXCEDIDO' | 'LIMITE_PERIODO_QUANTIDADE_EXCEDIDO' | 'LIMITE_VALOR_TOTAL_CONSENTIMENTO_EXCEDIDO' | 'LIMITE_VALOR_TRANSACAO_CONSENTIMENTO_EXCEDIDO' | 'LIMITE_TENTATIVAS_EXCEDIDO' | 'CONSENTIMENTO_REVOGADO' | 'FORA_PRAZO_PERMITIDO' | 'DETALHE_TENTATIVA_INVALIDO' | 'DETALHE_PAGAMENTO_INVALIDO';
            /** @description Additional details about the error */
            detail: string;
        };
        /** @description Request to schedule an Automatic PIX payment */
        ScheduleAutomaticPixPaymentRequest: {
            /** @description Transaction value */
            amount: number;
            /** @description Transaction description */
            description?: string;
            /**
             * Format: date
             * @description The payment date, which must fall between D+2 and D+10. Date format must be YYYY-MM-DD (for example: 2025-06-16)
             */
            date: string;
            /** @description External identifier for the payment */
            clientPaymentId?: string;
        };
        /** @description Request to retry an automatic PIX payment */
        RetryAutomaticPixPaymentRequest: {
            /**
             * Format: date
             * @description The date to retry the payment within a 7-day window. Date format must be YYYY-MM-DD (for example: 2025-06-16)
             */
            date: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description Expects the following webhooks parameters:
         *     event: One of the event types that are supported.
         *     url: An https url that will receive the POST of the event.
         *     headers: optional key-value pairs to send with the POST of the event. */
        CreateWebhook: {
            content: {
                'application/json': components['schemas']['CreateWebhook'];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    'auth-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AuthRequest'];
            };
        };
        responses: {
            /** @description API Key generated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AuthResponse'];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'connect-token-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create connect token payload */
        requestBody?: {
            content: {
                'application/json': components['schemas']['ConnectTokenRequest'];
            };
        };
        responses: {
            /** @description Created connect token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConnectTokenResponse'];
                };
            };
            /** @description Unauthenticated */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotAuthenticatedResponse'];
                };
            };
            /** @description Related itemId to update not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'connectors-list': {
        parameters: {
            query?: {
                /**
                 * @description A list of countries of connectors to filter.
                 * @example ["BR"]
                 */
                countries?: 'BR'[];
                /**
                 * @description A list of types of connectors to filter.
                 * @example ["PERSONAL_BANK", "BUSINESS_BANK", "INVESTMENT", "INVOICE", "TELECOMMUNICATION", "OTHER"]
                 */
                types?: ('PERSONAL_BANK' | 'BUSINESS_BANK' | 'INVESTMENT' | 'INVOICE' | 'TELECOMMUNICATION' | 'OTHER')[];
                /** @description Name alike look up of the connector */
                name?: string;
                /** @description Include sandbox connectors if set to true (default: false). */
                sandbox?: boolean;
                /** @description Include health details about latest connections and percentage of errors (connection rate) */
                healthDetails?: boolean;
                /** @description Filter connectors by the `isOpenFinance` attribute. If not sent, it won't filter. */
                isOpenFinance?: boolean;
                /** @description Filter connectors by the `supportsPaymentInitiation` attribute. If not sent, it won't filter. */
                supportsPaymentInitiation?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all connectors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConnectorListResponse'];
                };
            };
        };
    };
    'connector-retrieve': {
        parameters: {
            query?: {
                /** @description Include health details about latest connections and percentage of errors (connection rate) */
                healthDetails?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description Connector primary identifier
                 * @example 201
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a connector. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Connector'];
                };
            };
            /** @description Connector not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "CONNECTOR_NOT_FOUND",
                     *       "message": "connector not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'connectors-validate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Connector's primary identifier
                 * @example 2
                 */
                id: number;
            };
            cookie?: never;
        };
        /** @description Connector's input credentials in a key-value object. */
        requestBody: {
            content: {
                'application/json': components['schemas']['ItemParameter'];
            };
        };
        responses: {
            /** @description Connector validation response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ParameterValidationResponse'];
                };
            };
        };
    };
    'items-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateItem'];
            };
        };
        responses: {
            /** @description Created item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Item'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ItemCreationErrorResponse'];
                };
            };
            /** @description There is a conflict creating an item */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 409,
                     *       "codeDescription": "ITEM_CREATION_LIMIT_EXCEEDED",
                     *       "message": "Client exceeded item creation limit (100 items) for the current subscription level.",
                     *       "data": {
                     *         "itemsLimit": 100
                     *       }
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "codeDescription": "INTERNAL_SERVER_ERROR",
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'items-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Item primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item was retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Item'];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'items-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Item primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ICountResponse'];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'items-update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Item primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        /** @description Update item request */
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateItem'];
            };
        };
        responses: {
            /** @description Update the item was successful, new sync was triggered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Item'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description There is a conflict updating the item */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 409,
                     *       "codeDescription": "CLIENT_IS_UPDATING_BEFORE_ALLOWED_FREQUENCY",
                     *       "message": "Client updates on this item are allowed at most every {minUpdateFrequencyAllowedInHours} hours. Last update was at {lastUpdatedAt}",
                     *       "data": {
                     *         "minUpdateFrequencyAllowedInHours": 24,
                     *         "lastUpdatedAt": "2020-01-01T00:00:00.000Z"
                     *       }
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'items-send-mfa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Item primary identifier
                 * @example d0e8448e-0156-4b4a-ae6c-3e2a6d9bff5c
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description Parameter was sent correctly */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Item'];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'items-disable-autosync': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Item primary identifier
                 * @example d0e8448e-0156-4b4a-ae6c-3e2a6d9bff5c
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item auto sync was disabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Item'];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ITEM_NOT_FOUND",
                     *       "message": "item not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'consents-list': {
        parameters: {
            query: {
                /**
                 * @description Item primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                itemId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all consents given to an item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageResponseConsents'];
                };
            };
            /** @description Missing parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "itemId should not be null or undefined,itemId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'consent-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Consent primary identifier
                 * @example 6ec156fe-e8ac-4d9a-a4b3-7770529ab01c
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a consent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Consent'];
                };
            };
            /** @description Consent not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "CONSENT_NOT_FOUND",
                     *       "message": "Consent not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'accounts-list': {
        parameters: {
            query: {
                /**
                 * @description Item primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                itemId: string;
                /**
                 * @description Parameter to filter between bank accounts and credit accounts
                 * @example BANK
                 */
                type?: 'BANK' | 'CREDIT';
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all accounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of retrieved accounts */
                        results?: components['schemas']['Account'][];
                    };
                };
            };
        };
    };
    'accounts-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Account primary identifier
                 * @example a658c848-e475-457b-8565-d1fffba127c4
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Account'];
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "ACCOUNT_NOT_FOUND",
                     *       "message": "account not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'account-statements-list': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Account primary identifier
                 * @example a658c848-e475-457b-8565-d1fffba127c4
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all statements for an account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        total: number;
                        totalPages: number;
                        page: number;
                        results: {
                            /** Format: uuid */
                            id: string;
                            monthYear: string;
                            /** @description Signed URL to the statement file, this url is valid for 30 minutes */
                            url: string;
                        }[];
                    };
                };
            };
            /** @description Missing parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "accountId should not be null or undefined,accountId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'transactions-list': {
        parameters: {
            query: {
                /**
                 * @description Account primary identifier
                 * @example 562b795d-1653-429f-be86-74ead9502813
                 */
                accountId: string;
                /**
                 * @description Array of transaction identifiers. If defined, 'from' and 'to' parameters will be discarded
                 * @example a8534c85-53ce-4f21-94d7-50e9d2ee4957, 05c693bf-c196-47ea-a28c-8251d6bb8a06
                 */
                ids?: string[];
                /**
                 * @description Filter greater than date. Format (yyyy-mm-dd)
                 * @example 2020-10-13
                 */
                from?: string;
                /**
                 * @description Filter lower than date. Format (yyyy-mm-dd)
                 * @example 2020-10-15
                 */
                to?: string;
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Credit Card Bill's primary identifier, if account is a credit card.
                 * @example abced929-edc4-408c-a959-d51f79ab1123
                 */
                billId?: string;
                /**
                 * @description Filter greater than createdAt. Format (yyyy-mm-ddThh:mm:ss.000Z)
                 * @example 2020-10-13T03:00:00.000Z
                 */
                createdAtFrom?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all transactions for an account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageResponseTransactions'];
                };
            };
            /** @description Missing parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "accountId should not be null or undefined,accountId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'transactions-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description transaction primary identifier
                 * @example 6ec156fe-e8ac-4d9a-a4b3-7770529ab01c
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a transaction. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Transaction'];
                };
            };
            /** @description Transaction not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "TRANSACTION_NOT_FOUND",
                     *       "message": "Transaction not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'transactions-Update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description transaction primary identifier
                 * @example 6ec156fe-e8ac-4d9a-a4b3-7770529ab01c
                 */
                id: string;
            };
            cookie?: never;
        };
        /** @description New category identifier */
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateTransaction'];
            };
        };
        responses: {
            /** @description Retrieve an updated transaction. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Transaction'];
                };
            };
            /** @description Missing parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Transaction Id should not be null or undefined, transactionId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Transaction not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "message": "Transaction not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'investments-list': {
        parameters: {
            query: {
                /**
                 * @description Item's primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                itemId: string;
                /** @description Investment's type to filter */
                type?: 'COE' | 'EQUITY' | 'ETF' | 'FIXED_INCOME' | 'MUTUAL_FUND' | 'SECURITY' | 'OTHER';
                /**
                 * @description Page size for the paging request, default: 500
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all investments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of investments */
                        results?: components['schemas']['Investment'][];
                    };
                };
            };
        };
    };
    'investments-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description investment primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an investment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Investment'];
                };
            };
            /** @description Investment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "INVESTMENT_NOT_FOUND",
                     *       "message": "investment not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'investment-transactions-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Investment primary identifier
                 * @example 562b795d-1653-429f-be86-74ead9502813
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all transactions for an investment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageResponseInvestmentTransactions'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'identity-find-by-item': {
        parameters: {
            query: {
                /**
                 * @description Item's primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                itemId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an identity by itemId */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                     *       "fullName": "Francisco Sousa",
                     *       "companyName": "Pluggy Inc.",
                     *       "document": "076.630.975-48",
                     *       "taxNumber": "38.512.121/0001-95",
                     *       "documentType": "CPF",
                     *       "jobTitle": "Comercial",
                     *       "birthDate": "1991-05-01T00:00:00.000Z",
                     *       "establishmentCode": "001",
                     *       "establishmentName": "Pluggy Establishment",
                     *       "addresses": [
                     *         {
                     *           "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                     *           "country": "Brasil",
                     *           "state": "RJ",
                     *           "city": "Rio de Janeiro",
                     *           "postalCode": "22620-171",
                     *           "primaryAddress": "Av. Lúcio Costa, 1234",
                     *           "type": "Personal"
                     *         }
                     *       ],
                     *       "phoneNumbers": [
                     *         {
                     *           "type": "Personal",
                     *           "value": "+54 911 12345678"
                     *         }
                     *       ],
                     *       "emails": [
                     *         {
                     *           "type": "Personal",
                     *           "value": "myemail@pluggy.ai"
                     *         }
                     *       ],
                     *       "relations": [
                     *         {
                     *           "type": "Father",
                     *           "name": "Juan Gonzalez"
                     *         },
                     *         {
                     *           "type": "Spouse",
                     *           "name": "Laura Garcia"
                     *         }
                     *       ],
                     *       "createdAt": "2020-09-30T14:38:12.724Z",
                     *       "updatedAt": "2020-09-30T14:38:12.724Z"
                     *     } */
                    'application/json': components['schemas']['IdentityResponse'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "itemId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Identity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "IDENTITY_NOT_FOUND",
                     *       "message": "identity not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'identity-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description identity primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve an Identity resource. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "42888436-62f5-49d2-8cf9-e312c7939509",
                     *       "fullName": "Francisco Sousa",
                     *       "companyName": "Pluggy Inc.",
                     *       "document": "076.630.975-48",
                     *       "taxNumber": "38.512.121/0001-95",
                     *       "documentType": "CPF",
                     *       "jobTitle": "Comercial",
                     *       "birthDate": "1991-05-01T00:00:00.000Z",
                     *       "establishmentCode": "001",
                     *       "establishmentName": "Pluggy Establishment",
                     *       "addresses": [
                     *         {
                     *           "fullAddress": "Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil",
                     *           "country": "Brasil",
                     *           "state": "RJ",
                     *           "city": "Rio de Janeiro",
                     *           "postalCode": "22620-171",
                     *           "primaryAddress": "Av. Lúcio Costa, 1234",
                     *           "type": "Personal",
                     *           "additionalInfo": "Casa amarela"
                     *         }
                     *       ],
                     *       "phoneNumbers": [
                     *         {
                     *           "type": "Personal",
                     *           "value": "+54 911 12345678"
                     *         }
                     *       ],
                     *       "emails": [
                     *         {
                     *           "type": "Personal",
                     *           "value": "myemail@pluggy.ai"
                     *         }
                     *       ],
                     *       "relations": [
                     *         {
                     *           "type": "Father",
                     *           "name": "Juan Gonzalez"
                     *         },
                     *         {
                     *           "type": "Spouse",
                     *           "name": "Laura Garcia"
                     *         }
                     *       ],
                     *       "createdAt": "2020-09-30T14:38:12.724Z",
                     *       "updatedAt": "2020-09-30T14:38:12.724Z"
                     *     } */
                    'application/json': components['schemas']['IdentityResponse'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "itemId must be a UUID",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Identity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "IDENTITY_NOT_FOUND",
                     *       "message": "identity not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Server Internal Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'webhooks-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Webhooks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        results?: components['schemas']['Webhook'][];
                    };
                };
            };
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'webhooks-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components['requestBodies']['CreateWebhook'];
        responses: {
            /** @description Created webhook */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Webhook'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ItemCreationErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "codeDescription": "INTERNAL_SERVER_ERROR",
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'webhooks-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description webhook primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Webhook'];
                };
            };
            /** @description Webhook not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "WEBHOOK_NOT_FOUND",
                     *       "message": "webhook not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'webhooks-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description webhook primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ICountResponse'];
                };
            };
            /** @description Webhook not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "WEBHOOK_NOT_FOUND",
                     *       "message": "webhook not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'webhooks-update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description webhook primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: components['requestBodies']['CreateWebhook'];
        responses: {
            /** @description Update the webhook that was sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Webhook'];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "Webhook url must be valid URL address and not localhost",
                     *       "code": 400
                     *     } */
                    'application/json': components['schemas']['WebhookCreationErrorResponse'];
                };
            };
            /** @description Webhook not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "WEBHOOK_NOT_FOUND",
                     *       "message": "webhook not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Unexpected error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 500,
                     *       "message": "Internal Server Error"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'categories-list': {
        parameters: {
            query?: {
                /**
                 * @description Parent's primary identifier
                 * @example 01000000
                 */
                parentId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "page": 1,
                     *       "total": 2,
                     *       "totalPages": 1,
                     *       "results": [
                     *         {
                     *           "id": "01000000",
                     *           "description": "Income",
                     *           "descriptionTranslated": "Renda"
                     *         },
                     *         {
                     *           "id": "01010000",
                     *           "description": "Salary/pro-labore",
                     *           "descriptionTranslated": "Salário",
                     *           "parentId": "01000000",
                     *           "parentDescription": "Income"
                     *         }
                     *       ]
                     *     } */
                    'application/json': components['schemas']['Category'][];
                };
            };
        };
    };
    'categories-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description category primary identifier
                 * @example 01000000
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a category. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Category'];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "CATEGORY_NOT_FOUND",
                     *       "message": "category not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'client-category-rules-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all client category rules. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PageResponseCategoryRules'][];
                };
            };
        };
    };
    'client-category-rules-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateClientCategoryRule'];
            };
        };
        responses: {
            /** @description Creates a Category Rule and recover the result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ClientCategoryRule'];
                };
            };
            /** @description Invalid description */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "description must be a string"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "CATEGORY_NOT_FOUND",
                     *       "message": "category not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'loans-list': {
        parameters: {
            query: {
                /**
                 * @description Item's primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                itemId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all loans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of loans */
                        results?: components['schemas']['Loan'][];
                    };
                };
            };
        };
    };
    'loans-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description loan primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a loan. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Loan'];
                };
            };
            /** @description Loan not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "LOAN_NOT_FOUND",
                     *       "message": "loan not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'bills-list': {
        parameters: {
            query: {
                /**
                 * @description Account's primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                accountId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all credit card bills */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of credit card bills */
                        results?: components['schemas']['Bill'][];
                    };
                };
            };
        };
    };
    'bills-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Bill primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a credit card bill. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Bill'];
                };
            };
            /** @description Bill not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "CREDIT_CARD_BILL_NOT_FOUND",
                     *       "message": "Bill not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-customers-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Filter payment customers by name
                 * @example John
                 */
                name?: string;
                /**
                 * @description Filter payment customers by email
                 * @example john.doe@email.com
                 */
                email?: string;
                /**
                 * @description Filter payment customers by CPF
                 * @example 11111111111
                 */
                cpf?: string;
                /**
                 * @description Filter payment customers by CNPJ
                 * @example 1111111111111
                 */
                cnpj?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all payment customers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of payment customers */
                        results?: components['schemas']['PaymentCustomer'][];
                    };
                };
            };
        };
    };
    'payment-customer-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePaymentCustomerRequestBody'];
            };
        };
        responses: {
            /** @description Create a payment customer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentCustomer'];
                };
            };
            /** @description Payment Customer its Invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "email its not an email"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-customer-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment customer primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a customer request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentCustomer'];
                };
            };
            /** @description Payment Customer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                     *       "message": "Payment customer not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-customer-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment customer primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a customer request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Payment customer not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_CUSTOMER_NOT_FOUND",
                     *       "message": "Payment customer not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-customer-update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment customer primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateOrUpdatePaymentCustomer'];
            };
        };
        responses: {
            /** @description Update a payment customer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentCustomer'];
                };
            };
        };
    };
    'payment-recipients-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
                /** @description Filter connectors by the `isDefault` attribute. If not sent, it won't filter. */
                isDefault?: boolean;
                /**
                 * @description Filter payment recipient by Pix key
                 * @example 11111111111
                 */
                pixKey?: string;
                /**
                 * @description Filter payment recipient by name
                 * @example John
                 */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all payment recipients */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of payment recipients */
                        results?: components['schemas']['PaymentRecipient'][];
                    };
                };
            };
        };
    };
    'payment-recipient-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePaymentRecipient'];
            };
        };
        responses: {
            /** @description Create a payment recipient. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRecipient'];
                };
            };
            /** @description Payment Recipient its Invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "taxNumber is required"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-recipient-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment recipient primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a recipient. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRecipient'];
                };
            };
            /** @description Payment Recipient not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                     *       "message": "Payment recipient not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-recipient-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment recipient primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a recipient. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Payment recipient not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_RECIPIENT_NOT_FOUND",
                     *       "message": "Payment recipient not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-recipient-update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment recipient primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePaymentRecipient'];
            };
        };
        responses: {
            /** @description Update a payment recipient. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRecipient'];
                };
            };
        };
    };
    'payment-recipients-institution-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Filter institutions by name
                 * @example Itau
                 */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all payment institutions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of payment institutions */
                        results?: components['schemas']['PaymentInstitution'][];
                    };
                };
            };
        };
    };
    'payment-recipient-institutions-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment institution primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a payment institution. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentInstitution'];
                };
            };
            /** @description Payment Institution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_INSTITUTION_NOT_FOUND",
                     *       "message": "Payment institution not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-requests-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Filter payment requests by start date. Returns only requests created **on or after** this date.
                 * @example 2023-01-01
                 */
                from?: string;
                /**
                 * @description Filter payment requests by end date. Returns only requests created **on or before** this date.
                 * @example 2024-01-01
                 */
                to?: string;
                /**
                 * @description Filter payment requests with one customer attribute (name, email, CPF or CNPJ)
                 * @example John
                 */
                customer?: string;
                /**
                 * @description Filter payment requests by Pix Key
                 * @example 11111111111
                 */
                pixKey?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all payment requests */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of payment requests */
                        results?: components['schemas']['PaymentRequest'][];
                    };
                };
            };
        };
    };
    'payment-request-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePaymentRequest'];
            };
        };
        responses: {
            /** @description Success creating payment request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRequest'];
                };
            };
        };
    };
    'payment-request-create-automatic-pix': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateAutomaticPixPaymentRequest'];
            };
        };
        responses: {
            /** @description Create a Automatic PIX payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRequest'];
                };
            };
        };
    };
    'payment-request-create-automatic-pix-schedule': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['ScheduleAutomaticPixPaymentRequest'];
            };
        };
        responses: {
            /** @description Schedule a Automatic PIX payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AutomaticPixPayment'];
                };
            };
        };
    };
    'payment-request-get-automatic-pix-schedules': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recovers all automatic PIX payments from a payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of automatic PIX payments */
                        results?: components['schemas']['AutomaticPixPayment'][];
                    };
                };
            };
        };
    };
    'payment-request-get-automatic-pix-schedule': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                requestId: string;
                /**
                 * @description Automatic PIX scheduled payment primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recovers an automatic PIX scheduled payment by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AutomaticPixPayment'];
                };
            };
        };
    };
    'payment-request-cancel-automatic-pix-consent': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'cancel-automatic-pix-schedule': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
                /**
                 * @description Automatic PIX schedule primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                scheduleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'retry-automatic-pix-schedule': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
                /**
                 * @description Automatic PIX schedule primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                scheduleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['RetryAutomaticPixPaymentRequest'];
            };
        };
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'payment-request-create-pix-qr': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePixQrPaymentRequest'];
            };
        };
        responses: {
            /** @description Create a PIX QR payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRequest'];
                };
            };
        };
    };
    'payment-request-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentRequest'];
                };
            };
            /** @description Payment Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                     *       "message": "Payment request not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-request-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete a payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Payment Request not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_REQUEST_NOT_FOUND",
                     *       "message": "Payment request not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'payment-request-update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0f8a8c0-e8e3-11e9-b210-d663bd873d93
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdatePaymentRequest'];
            };
        };
        responses: {
            /** @description Update a payment request. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreatePaymentRequest'];
                };
            };
        };
    };
    'payment-schedules-list': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all scheduled payments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of scheduled payments from a payment request */
                        results?: components['schemas']['SchedulePayment'][];
                    };
                };
            };
        };
    };
    'payment-schedules-cancel': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'payment-schedules-cancel-specific': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
                /**
                 * @description Payment schedule primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                scheduleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'payment-intents-list': {
        parameters: {
            query: {
                /**
                 * @description Payment request primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                paymentRequestId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all payment intents for the payment request provided */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of payment intents */
                        results?: components['schemas']['PaymentIntent'][];
                    };
                };
            };
        };
    };
    'payment-intent-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreatePaymentIntent'];
            };
        };
        responses: {
            /** @description Create a payment intent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentIntent'];
                };
            };
        };
    };
    'payment-intent-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment intent primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a payment intent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentIntent'];
                };
            };
            /** @description Payment Intent not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "PAYMENT_INTENT_NOT_FOUND",
                     *       "message": "Payment intent not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'smart-tranfers-preauthorizations-list': {
        parameters: {
            query?: {
                /**
                 * @description Page size for the paging request, default: 20
                 * @example 50
                 */
                pageSize?: number;
                /**
                 * @description Page number for the paging request, default: 1
                 * @example 1
                 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a list of all preauthorizations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** Format: double */
                        page?: number;
                        /** Format: double */
                        total?: number;
                        /** Format: double */
                        totalPages?: number;
                        /** @description List of preauthorizations */
                        results?: components['schemas']['SmartTransferPreauthorization'][];
                    };
                };
            };
        };
    };
    'smart-transfer-preauthorization-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateSmartTransferPreauthorization'];
            };
        };
        responses: {
            /** @description Create a Smart Transfer Preauthorization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmartTransferPreauthorization'];
                };
            };
            /** @description Preauthorization is Invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "each value in recipientIds must be a UUID"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'smart-transfer-preauthorization-retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Preauthorization primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a preauthorization */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmartTransferPreauthorization'];
                };
            };
            /** @description Smart Transfer Preauthorization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "SMART_TRANSFER_PREAUTHORIZATION_NOT_FOUND",
                     *       "message": "Smart Transfer Preauthorization not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'smart-transfer-payment-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateSmartTransferPayment'];
            };
        };
        responses: {
            /** @description Create a Smart Transfer Payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmartTransferPayment'];
                };
            };
            /** @description Payment is Invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 400,
                     *       "message": "recipientId must be a UUID"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'smart-transfer-paymentretrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Payment primary identifier
                 * @example d0e8a7f0-6d86-11ea-b77f-2e728ce88125
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a payment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmartTransferPayment'];
                };
            };
            /** @description Smart Transfer Payment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": 404,
                     *       "codeDescription": "SMART_TRANSFER_PAYMENT_NOT_FOUND",
                     *       "message": "Smart Transfer Payment not found"
                     *     } */
                    'application/json': components['schemas']['GlobalErrorResponse'];
                };
            };
        };
    };
    'boleto-connection-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateBoletoConnection'];
            };
        };
        responses: {
            /** @description Boleto connection created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BoletoConnection'];
                };
            };
            /** @description Incorrect credentials */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "message": "INVALID_CREDENTIALS",
                     *       "code": 400,
                     *       "codeDescription": "BOLETO_CONNECTION_CREATION_CREDENTIALS_ERROR",
                     *       "errorId": "10aa01fe-4587-404e-8ec3-3ae5f6a63a5d"
                     *     } */
                    'application/json': unknown;
                };
            };
        };
    };
    'boleto-connection-create-from-item': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateBoletoConnectionFromItem'];
            };
        };
        responses: {
            /** @description Boleto connection created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BoletoConnection'];
                };
            };
        };
    };
    'boleto-create': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateBoleto'];
            };
        };
        responses: {
            /** @description Boleto created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssuedBoleto'];
                };
            };
        };
    };
    'boleto-cancel': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Boleto primary identifier
                 * @example 82da0d63-fbc0-4e20-b191-50e6df030875
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Boleto cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssuedBoleto'];
                };
            };
        };
    };
    'boleto-get': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Boleto primary identifier
                 * @example 82da0d63-fbc0-4e20-b191-50e6df030875
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Issued Boleto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['IssuedBoleto'];
                };
            };
        };
    };
}
